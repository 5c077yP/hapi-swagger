{
  "tests": {
    "info": [
      {
        "title": "defaults for swagger root object properties",
        "err": false,
        "duration": 34
      },
      {
        "title": "set values for swagger root object properties",
        "err": false,
        "duration": 21
      },
      {
        "title": "no info object passed",
        "err": false,
        "duration": 8
      },
      {
        "title": "no info title property passed",
        "err": false,
        "duration": 7
      },
      {
        "title": "min valid info object",
        "err": false,
        "duration": 7
      },
      {
        "title": "full info object",
        "err": false,
        "duration": 8
      }
    ],
    "proxies": [
      {
        "title": "child",
        "err": false,
        "duration": 9
      },
      {
        "title": "basePath option",
        "err": false,
        "duration": 7
      },
      {
        "title": "schemes and host options",
        "err": false,
        "duration": 7
      },
      {
        "title": "x-forwarded options",
        "err": false,
        "duration": 7
      },
      {
        "title": "adding facade for proxy using route options",
        "err": false,
        "duration": 11
      },
      {
        "title": "adding facade for proxy using route options",
        "err": false,
        "duration": 14
      }
    ],
    "definitions": [
      {
        "title": "payload with inline definition",
        "err": false,
        "duration": 11
      }
    ],
    "filter": [
      {
        "title": "filter by tags=a",
        "err": false,
        "duration": 13
      },
      {
        "title": "filter by tags=a",
        "err": false,
        "duration": 10
      },
      {
        "title": "filter by tags=a,c",
        "err": false,
        "duration": 10
      },
      {
        "title": "filter by tags=a,-b",
        "err": false,
        "duration": 11
      },
      {
        "title": "filter by tags=a,+c",
        "err": false,
        "duration": 9
      },
      {
        "title": "filter by tags=x",
        "err": false,
        "duration": 14
      }
    ],
    "group": [
      {
        "title": "test groups tagging of paths",
        "err": false,
        "duration": 10
      },
      {
        "title": "getNameByPath 1",
        "err": false,
        "duration": 0
      },
      {
        "title": "getNameByPath 2",
        "err": false,
        "duration": 0
      },
      {
        "title": "getNameByPath 3",
        "err": false,
        "duration": 0
      },
      {
        "title": "getNameByPath 4",
        "err": false,
        "duration": 1
      },
      {
        "title": "getNameByPath 5",
        "err": false,
        "duration": 0
      }
    ],
    "index": [
      {
        "title": "plug-in register no vision dependency",
        "err": false,
        "duration": 2
      },
      {
        "title": "plug-in register no inert dependency",
        "err": false,
        "duration": 3
      },
      {
        "title": "plug-in register no options",
        "err": false,
        "duration": 6
      },
      {
        "title": "plug-in register test",
        "err": false,
        "duration": 8
      },
      {
        "title": "default jsonPath url",
        "err": false,
        "duration": 1
      },
      {
        "title": "default documentationPath url",
        "err": false,
        "duration": 21
      },
      {
        "title": "default swaggerUIPath url",
        "err": false,
        "duration": 20
      },
      {
        "title": "repathed jsonPath url",
        "err": false,
        "duration": 2
      },
      {
        "title": "repathed documentationPath url",
        "err": false,
        "duration": 7
      },
      {
        "title": "repathed swaggerUIPath url",
        "err": false,
        "duration": 17
      },
      {
        "title": "disable documentation path",
        "err": false,
        "duration": 7
      },
      {
        "title": "payloadType = form global",
        "err": false,
        "duration": 7
      },
      {
        "title": "payloadType = json global",
        "err": false,
        "duration": 6
      },
      {
        "title": "pathPrefixSize global",
        "err": false,
        "duration": 6
      },
      {
        "title": "expanded none",
        "err": false,
        "duration": 7
      },
      {
        "title": "expanded list",
        "err": false,
        "duration": 12
      },
      {
        "title": "expanded full",
        "err": false,
        "duration": 9
      },
      {
        "title": "pass through of tags querystring",
        "err": false,
        "duration": 14
      }
    ],
    "tags": [
      {
        "title": "no tag objects passed",
        "err": false,
        "duration": 7
      },
      {
        "title": "name property passed",
        "err": false,
        "duration": 7
      },
      {
        "title": "full tag object",
        "err": false,
        "duration": 8
      }
    ],
    "utilities": [
      {
        "title": "hasProperties",
        "err": false,
        "duration": 0
      }
    ]
  },
  "duration": 410,
  "leaks": [],
  "coverage": {
    "sloc": 1050,
    "hits": 943,
    "misses": 107,
    "percent": 89.80952380952381,
    "files": [
      {
        "filename": "lib/builder.js",
        "percent": "100",
        "hits": 133,
        "misses": 0,
        "sloc": 133,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Builds the swagger JSON file",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "'use strict';",
            "miss": false
          },
          "6": {
            "source": "var Hoek             = require('hoek'),",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "    Boom             = require('boom'),",
            "miss": false
          },
          "8": {
            "source": "    Joi              = require('joi'),",
            "miss": false
          },
          "9": {
            "source": "    Path             = require('path'),",
            "miss": false
          },
          "10": {
            "source": "    Url              = require('url'),",
            "miss": false
          },
          "11": {
            "source": "    Group            = require('../lib/group'),",
            "miss": false
          },
          "12": {
            "source": "    Filter           = require('../lib/filter'),",
            "miss": false
          },
          "13": {
            "source": "    Definitions      = require('../lib/definitions'),",
            "miss": false
          },
          "14": {
            "source": "    Info             = require('../lib/info'),",
            "miss": false
          },
          "15": {
            "source": "    Paths            = require('../lib/paths'),",
            "miss": false
          },
          "16": {
            "source": "    Tags             = require('../lib/tags');",
            "miss": false
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "",
            "miss": false
          },
          "19": {
            "source": "var builder = module.exports = {};",
            "hits": 1,
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "// default data for root object",
            "miss": false
          },
          "23": {
            "source": "builder.default = {",
            "hits": 1,
            "miss": false
          },
          "24": {
            "source": "    'swagger': '2.0',",
            "miss": false
          },
          "25": {
            "source": "    'schemes': ['http'],",
            "miss": false
          },
          "26": {
            "source": "    'host': 'localhost',",
            "miss": false
          },
          "27": {
            "source": "    'basePath': '/',",
            "miss": false
          },
          "28": {
            "source": "    'consumes': ['application/json'],",
            "miss": false
          },
          "29": {
            "source": "    'produces': ['application/json']",
            "miss": false
          },
          "30": {
            "source": "}",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "// schema for swagger root object",
            "miss": false
          },
          "33": {
            "source": "builder.schema = Joi.object({",
            "hits": 1,
            "miss": false
          },
          "34": {
            "source": "    swagger: Joi.string().valid('2.0').required(),",
            "miss": false
          },
          "35": {
            "source": "    info: Joi.any(),",
            "miss": false
          },
          "36": {
            "source": "    host: Joi.string(),  // JOI hostname validator too strict ",
            "miss": false
          },
          "37": {
            "source": "    basePath: Joi.string().regex(/^\\//),",
            "miss": false
          },
          "38": {
            "source": "    schemes: Joi.array().items(Joi.string().valid(['http', 'https', 'ws', 'wss'])),",
            "miss": false
          },
          "39": {
            "source": "    consumes: Joi.array().items(Joi.string()),",
            "miss": false
          },
          "40": {
            "source": "    produces: Joi.array().items(Joi.string()), ",
            "miss": false
          },
          "41": {
            "source": "    paths: Joi.any(),",
            "miss": false
          },
          "42": {
            "source": "    definitions: Joi.any(),",
            "miss": false
          },
          "43": {
            "source": "    parameters: Joi.any(),",
            "miss": false
          },
          "44": {
            "source": "    responses: Joi.any(),",
            "miss": false
          },
          "45": {
            "source": "    securityDefinitions: Joi.any(),",
            "miss": false
          },
          "46": {
            "source": "    security: Joi.any(),",
            "miss": false
          },
          "47": {
            "source": "    tags: Joi.any(),",
            "miss": false
          },
          "48": {
            "source": "    externalDocs: Joi.object({",
            "miss": false
          },
          "49": {
            "source": "        description: Joi.string(),",
            "miss": false
          },
          "50": {
            "source": "        url: Joi.string().uri(),",
            "miss": false
          },
          "51": {
            "source": "    }),       ",
            "miss": false
          },
          "52": {
            "source": "})",
            "miss": false
          },
          "53": {
            "source": "",
            "miss": false
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "/**",
            "miss": false
          },
          "56": {
            "source": " * finds the host",
            "miss": false
          },
          "57": {
            "source": " *",
            "miss": false
          },
          "58": {
            "source": " * @param  {Object} request",
            "miss": false
          },
          "59": {
            "source": " * @return {String}",
            "miss": false
          },
          "60": {
            "source": " */",
            "miss": false
          },
          "61": {
            "source": "function getHost( request ){",
            "hits": 1,
            "miss": false
          },
          "62": {
            "source": "    return request.headers['x-forwarded-host'] || request.headers.host;",
            "hits": 32,
            "miss": false
          },
          "63": {
            "source": "}",
            "miss": false
          },
          "64": {
            "source": "",
            "miss": false
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "/**",
            "miss": false
          },
          "67": {
            "source": " * finds the schema",
            "miss": false
          },
          "68": {
            "source": " *",
            "miss": false
          },
          "69": {
            "source": " * @param  {Object} request",
            "miss": false
          },
          "70": {
            "source": " * @return {String}",
            "miss": false
          },
          "71": {
            "source": " */",
            "miss": false
          },
          "72": {
            "source": "function _getSchema( request ){",
            "hits": 1,
            "miss": false
          },
          "73": {
            "source": "    return request.headers['x-forwarded-proto'] || request.server.info.protocol;",
            "hits": 32,
            "miss": false
          },
          "74": {
            "source": "}",
            "miss": false
          },
          "75": {
            "source": "",
            "miss": false
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "/**",
            "miss": false
          },
          "78": {
            "source": " * removes none schema properties from options",
            "miss": false
          },
          "79": {
            "source": " *",
            "miss": false
          },
          "80": {
            "source": " * @param  {Object} request",
            "miss": false
          },
          "81": {
            "source": " * @return {String}",
            "miss": false
          },
          "82": {
            "source": " */",
            "miss": false
          },
          "83": {
            "source": "function removeNoneSchemaOptions( options ){",
            "hits": 1,
            "miss": false
          },
          "84": {
            "source": "    var out =  Hoek.clone( options );",
            "hits": 64,
            "miss": false
          },
          "85": {
            "source": "    [",
            "hits": 64,
            "miss": false
          },
          "86": {
            "source": "        'documentationPath',",
            "miss": false
          },
          "87": {
            "source": "        'jsonPath',",
            "miss": false
          },
          "88": {
            "source": "        'swaggerUIPath',",
            "miss": false
          },
          "89": {
            "source": "        'pathPrefixSize',",
            "miss": false
          },
          "90": {
            "source": "        'payloadType',",
            "miss": false
          },
          "91": {
            "source": "        'enableDocumentationPage',",
            "miss": false
          },
          "92": {
            "source": "        'expanded',",
            "miss": false
          },
          "93": {
            "source": "        'lang'",
            "miss": false
          },
          "94": {
            "source": "    ].forEach(function( element ){",
            "miss": false
          },
          "95": {
            "source": "        delete out[element];",
            "hits": 512,
            "miss": false
          },
          "96": {
            "source": "    });",
            "miss": false
          },
          "97": {
            "source": "    return out;",
            "hits": 64,
            "miss": false
          },
          "98": {
            "source": "} ",
            "miss": false
          },
          "99": {
            "source": "",
            "miss": false
          },
          "100": {
            "source": "",
            "miss": false
          },
          "101": {
            "source": "/**",
            "miss": false
          },
          "102": {
            "source": " * gets the Swagger JSON",
            "miss": false
          },
          "103": {
            "source": " *",
            "miss": false
          },
          "104": {
            "source": " * @param  {Object} settings",
            "miss": false
          },
          "105": {
            "source": " * @return {Object}",
            "miss": false
          },
          "106": {
            "source": " */",
            "miss": false
          },
          "107": {
            "source": "builder.getSwaggerJSON = function( settings, request ){",
            "hits": 1,
            "miss": false
          },
          "108": {
            "source": "    ",
            "miss": false
          },
          "109": {
            "source": "    // remove items that cannot be changed by user",
            "miss": false
          },
          "110": {
            "source": "    delete settings.swagger",
            "hits": 32,
            "miss": false
          },
          "111": {
            "source": "    ",
            "miss": false
          },
          "112": {
            "source": "    // collect root information",
            "miss": false
          },
          "113": {
            "source": "    builder.default.host = getHost( request );",
            "hits": 32,
            "miss": false
          },
          "114": {
            "source": "    builder.default.schemes = [_getSchema( request )];",
            "hits": 32,
            "miss": false
          },
          "115": {
            "source": "    ",
            "miss": false
          },
          "116": {
            "source": "    ",
            "miss": false
          },
          "117": {
            "source": "    settings = Hoek.applyToDefaults(builder.default, settings);",
            "hits": 32,
            "miss": false
          },
          "118": {
            "source": "    var out = removeNoneSchemaOptions( settings );",
            "hits": 32,
            "miss": false
          },
          "119": {
            "source": "    Joi.assert(out, builder.schema);",
            "hits": 32,
            "miss": false
          },
          "120": {
            "source": "    ",
            "miss": false
          },
          "121": {
            "source": "    ",
            "miss": false
          },
          "122": {
            "source": "    out.info = Info.build( settings );",
            "hits": 32,
            "miss": false
          },
          "123": {
            "source": "    out.tags = Tags.build( settings );",
            "hits": 32,
            "miss": false
          },
          "124": {
            "source": "    ",
            "miss": false
          },
          "125": {
            "source": "    ",
            "miss": false
          },
          "126": {
            "source": "    var routes = request.connection.table();",
            "hits": 32,
            "miss": false
          },
          "127": {
            "source": "    ",
            "miss": false
          },
          "128": {
            "source": "    // filter routes displayed based on tags passed in query string",
            "miss": false
          },
          "129": {
            "source": "    if (request.query.tags) {",
            "hits": 32,
            "miss": false
          },
          "130": {
            "source": "        var filterTags = request.query.tags.split(',');",
            "hits": 6,
            "miss": false
          },
          "131": {
            "source": "        routes = Filter.byTags( filterTags, routes );",
            "hits": 6,
            "miss": false
          },
          "132": {
            "source": "    }",
            "miss": false
          },
          "133": {
            "source": "    ",
            "miss": false
          },
          "134": {
            "source": "    // group the routes - by path",
            "miss": false
          },
          "135": {
            "source": "",
            "miss": false
          },
          "136": {
            "source": "    routes = Group.byPath( settings, routes );",
            "hits": 32,
            "miss": false
          },
          "137": {
            "source": "    ",
            "miss": false
          },
          "138": {
            "source": "    ",
            "miss": false
          },
          "139": {
            "source": "    ",
            "miss": false
          },
          "140": {
            "source": "    var pathData = Paths.build( settings, routes );",
            "hits": 32,
            "miss": false
          },
          "141": {
            "source": "    ",
            "miss": false
          },
          "142": {
            "source": "    out.paths =  pathData.paths;",
            "hits": 32,
            "miss": false
          },
          "143": {
            "source": "    out.definitions =  pathData.definitions;",
            "hits": 32,
            "miss": false
          },
          "144": {
            "source": "    ",
            "miss": false
          },
          "145": {
            "source": "    //console.log( JSON.stringify( Paths.build( settings, request )) );",
            "miss": false
          },
          "146": {
            "source": "    ",
            "miss": false
          },
          "147": {
            "source": "    return removeNoneSchemaOptions( out );",
            "hits": 32,
            "miss": false
          },
          "148": {
            "source": "}",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "builder.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/definitions.js",
        "percent": "100",
        "hits": 59,
        "misses": 0,
        "sloc": 59,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Builds the swagger JSON file definitions section",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "'use strict';",
            "miss": false
          },
          "7": {
            "source": "var Hoek                    = require('hoek'),",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "    Boom                    = require('boom'),",
            "miss": false
          },
          "9": {
            "source": "    Joi                     = require('joi');",
            "miss": false
          },
          "10": {
            "source": "\t",
            "miss": false
          },
          "11": {
            "source": "    ",
            "miss": false
          },
          "12": {
            "source": "var definitions = module.exports = {};\t",
            "hits": 1,
            "miss": false
          },
          "13": {
            "source": "\t",
            "miss": false
          },
          "14": {
            "source": "    ",
            "miss": false
          },
          "15": {
            "source": "/**",
            "miss": false
          },
          "16": {
            "source": " * builds definition object in the JSON schema structure",
            "miss": false
          },
          "17": {
            "source": " *",
            "miss": false
          },
          "18": {
            "source": " * @param  {Object} parameters",
            "miss": false
          },
          "19": {
            "source": " * @return {Object}",
            "miss": false
          },
          "20": {
            "source": " */    ",
            "miss": false
          },
          "21": {
            "source": "definitions.build = function( parameters ){",
            "hits": 1,
            "miss": false
          },
          "22": {
            "source": "    ",
            "miss": false
          },
          "23": {
            "source": "    var out = {",
            "hits": 11,
            "miss": false
          },
          "24": {
            "source": "            'type': 'object',",
            "miss": false
          },
          "25": {
            "source": "            'properties': {}",
            "miss": false
          },
          "26": {
            "source": "        };",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "    // restructure path parameters to to JSON schema structure used in definitions",
            "miss": false
          },
          "29": {
            "source": "    for (var key in parameters) {",
            "hits": 11,
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "        var obj = parameters[key];",
            "hits": 36,
            "miss": false
          },
          "32": {
            "source": "        // move required to top level",
            "miss": false
          },
          "33": {
            "source": "        if( obj.required ){",
            "hits": 36,
            "miss": false
          },
          "34": {
            "source": "            if(out.required === undefined){",
            "hits": 4,
            "miss": false
          },
          "35": {
            "source": "                out.required = [];",
            "hits": 1,
            "miss": false
          },
          "36": {
            "source": "            }",
            "miss": false
          },
          "37": {
            "source": "            out.required.push(obj.name)",
            "hits": 4,
            "miss": false
          },
          "38": {
            "source": "        }",
            "miss": false
          },
          "39": {
            "source": "        ",
            "miss": false
          },
          "40": {
            "source": "        // remove properties with undefined values",
            "miss": false
          },
          "41": {
            "source": "        for (var objkey in obj) {",
            "hits": 36,
            "miss": false
          },
          "42": {
            "source": "            if(obj[objkey] === undefined){",
            "hits": 128,
            "miss": false
          },
          "43": {
            "source": "                delete obj[objkey];",
            "hits": 48,
            "miss": false
          },
          "44": {
            "source": "            }",
            "miss": false
          },
          "45": {
            "source": "        }",
            "miss": false
          },
          "46": {
            "source": "        out.properties[obj.name] = obj;",
            "hits": 36,
            "miss": false
          },
          "47": {
            "source": "        ",
            "miss": false
          },
          "48": {
            "source": "        // remove unneeded properties",
            "miss": false
          },
          "49": {
            "source": "        delete obj.name",
            "hits": 36,
            "miss": false
          },
          "50": {
            "source": "        delete obj.required;",
            "hits": 36,
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "    }",
            "miss": false
          },
          "53": {
            "source": "",
            "miss": false
          },
          "54": {
            "source": "    return out;",
            "hits": 11,
            "miss": false
          },
          "55": {
            "source": "}",
            "miss": false
          },
          "56": {
            "source": "",
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "/**",
            "miss": false
          },
          "59": {
            "source": " * validates definition object, throws error on none valid structure",
            "miss": false
          },
          "60": {
            "source": " *",
            "miss": false
          },
          "61": {
            "source": " * @param  {Object} parameters",
            "miss": false
          },
          "62": {
            "source": " * @return {Object}",
            "miss": false
          },
          "63": {
            "source": " */ ",
            "miss": false
          },
          "64": {
            "source": "definitions.valid = function( definition ){",
            "hits": 1,
            "miss": false
          },
          "65": {
            "source": "    ",
            "miss": false
          },
          "66": {
            "source": "    ",
            "miss": false
          },
          "67": {
            "source": "}",
            "miss": false
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "",
            "miss": false
          },
          "70": {
            "source": "",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "definitions.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/filter.js",
        "percent": "100",
        "hits": 56,
        "misses": 0,
        "sloc": 56,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Filters routes based on tags",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "'use strict';",
            "miss": false
          },
          "7": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "var filter = module.exports = {};\t",
            "hits": 1,
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "// Remove routes without the specified tags allow for + and - tag prefixes",
            "miss": false
          },
          "13": {
            "source": "// e.g.: ?&tags=movies,directors,actors",
            "miss": false
          },
          "14": {
            "source": "//         will show routes WITH 'movies' OR 'directors' OR 'actors'",
            "miss": false
          },
          "15": {
            "source": "//",
            "miss": false
          },
          "16": {
            "source": "// e.g.: ?&tags=movies,directors,+actors",
            "miss": false
          },
          "17": {
            "source": "//         will show routes WITH ('movies' OR 'directors')  AND 'actors'",
            "miss": false
          },
          "18": {
            "source": "//",
            "miss": false
          },
          "19": {
            "source": "//  e.g.: ?tags=movies,+directors,-actors",
            "miss": false
          },
          "20": {
            "source": "//         will show routes WITH 'movies' AND 'directors' AND NO 'actors'",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "/**",
            "miss": false
          },
          "24": {
            "source": " * filters routes based on tags",
            "miss": false
          },
          "25": {
            "source": " *",
            "miss": false
          },
          "26": {
            "source": " * @param  {Array} tags",
            "miss": false
          },
          "27": {
            "source": " * @param  {Array} routes",
            "miss": false
          },
          "28": {
            "source": " * @return {Array}",
            "miss": false
          },
          "29": {
            "source": " */",
            "miss": false
          },
          "30": {
            "source": "filter.byTags = function (tags, routes) {",
            "hits": 1,
            "miss": false
          },
          "31": {
            "source": "\tvar tag,",
            "hits": 6,
            "miss": false
          },
          "32": {
            "source": "\t\texit;",
            "miss": false
          },
          "33": {
            "source": "\t\t",
            "miss": false
          },
          "34": {
            "source": "\treturn routes.filter(function(route) {",
            "hits": 6,
            "miss": false
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "\t\tfor (var i = 0; i < tags.length; i++) {",
            "hits": 48,
            "miss": false
          },
          "37": {
            "source": "\t\t\tswitch(tags[i].substring(0,1)) {",
            "hits": 96,
            "miss": false
          },
          "38": {
            "source": "\t\t\t\tcase '-': // exclude tags that match this case",
            "miss": false
          },
          "39": {
            "source": "\t\t\t\t\ttag = tags[i].substring(1,tags[i].length);",
            "hits": 8,
            "miss": false
          },
          "40": {
            "source": "\t\t\t\t\tif (Hoek.intersect(route.settings.tags, [tag]).length > 0) {",
            "hits": 8,
            "miss": false
          },
          "41": {
            "source": "\t\t\t\t\t\texit = true;",
            "hits": 1,
            "miss": false
          },
          "42": {
            "source": "\t\t\t\t\t}",
            "miss": false
          },
          "43": {
            "source": "\t\t\t\t\tbreak;",
            "hits": 8,
            "miss": false
          },
          "44": {
            "source": "\t\t\t\tcase '+': // (+) filter out tagged paths that do not have this tag!",
            "miss": false
          },
          "45": {
            "source": "\t\t\t\t\ttag = tags[i].substring(1,tags[i].length);",
            "hits": 8,
            "miss": false
          },
          "46": {
            "source": "\t\t\t\t\tif (Hoek.intersect(route.settings.tags, [tag]).length == 0) {",
            "hits": 8,
            "miss": false
          },
          "47": {
            "source": "\t\t\t\t\t\texit = true;",
            "hits": 7,
            "miss": false
          },
          "48": {
            "source": "\t\t\t\t\t}",
            "miss": false
          },
          "49": {
            "source": "\t\t\t\t\tbreak;",
            "hits": 8,
            "miss": false
          },
          "50": {
            "source": "\t\t\t}",
            "miss": false
          },
          "51": {
            "source": "\t\t}",
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "\t\t// if we have reason to exit, then do so!",
            "miss": false
          },
          "54": {
            "source": "\t\tif (exit == true) {",
            "hits": 48,
            "miss": false
          },
          "55": {
            "source": "\t\t\treturn false;",
            "hits": 12,
            "miss": false
          },
          "56": {
            "source": "\t\t}",
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "\t\t// default behavior for tags is additive",
            "miss": false
          },
          "59": {
            "source": "\t\tif (Hoek.intersect(route.settings.tags, tags).length > 0) {",
            "hits": 36,
            "miss": false
          },
          "60": {
            "source": "\t\t\treturn true;",
            "hits": 10,
            "miss": false
          },
          "61": {
            "source": "\t\t}",
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "\t\t// fallback or no tag defined",
            "miss": false
          },
          "64": {
            "source": "\t\treturn false;",
            "hits": 26,
            "miss": false
          },
          "65": {
            "source": "\t});",
            "miss": false
          },
          "66": {
            "source": "\t",
            "miss": false
          },
          "67": {
            "source": "}",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "filter.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/group.js",
        "percent": "100",
        "hits": 68,
        "misses": 0,
        "sloc": 68,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Groups routes by URL path segments",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "'use strict';",
            "miss": false
          },
          "7": {
            "source": "var group = module.exports = {};\t",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "/**",
            "miss": false
          },
          "11": {
            "source": " * groups api endpoint by url path segments",
            "miss": false
          },
          "12": {
            "source": " *   - adds group property to route",
            "miss": false
          },
          "13": {
            "source": " *   - returns array of group names",
            "miss": false
          },
          "14": {
            "source": " *",
            "miss": false
          },
          "15": {
            "source": " * @param  {Object} settings",
            "miss": false
          },
          "16": {
            "source": " * @param  {Array} routes",
            "miss": false
          },
          "17": {
            "source": " * @return {Array}",
            "miss": false
          },
          "18": {
            "source": " */",
            "miss": false
          },
          "19": {
            "source": "group.byPath = function (settings, routes) {",
            "hits": 1,
            "miss": false
          },
          "20": {
            "source": "    //console.log(settings.pathPrefixSize)",
            "miss": false
          },
          "21": {
            "source": "    var out = [],",
            "hits": 32,
            "miss": false
          },
          "22": {
            "source": "        i = routes.length,",
            "miss": false
          },
          "23": {
            "source": "        x = 0,",
            "miss": false
          },
          "24": {
            "source": "        route,",
            "miss": false
          },
          "25": {
            "source": "        parts,",
            "miss": false
          },
          "26": {
            "source": "        prefix;        ",
            "miss": false
          },
          "27": {
            "source": "  ",
            "miss": false
          },
          "28": {
            "source": "    while (x < i) {",
            "hits": 32,
            "miss": false
          },
          "29": {
            "source": "        route = routes[x];",
            "hits": 117,
            "miss": false
          },
          "30": {
            "source": "        if (route.settings.tags && route.settings.tags.indexOf('api') > -1) {",
            "hits": 117,
            "miss": false
          },
          "31": {
            "source": "            parts = route.path.split('/');",
            "hits": 39,
            "miss": false
          },
          "32": {
            "source": "            prefix = group.getNameByPath(settings, route.path);",
            "hits": 39,
            "miss": false
          },
          "33": {
            "source": "            // append tag reference to route",
            "miss": false
          },
          "34": {
            "source": "            route.group = [prefix]",
            "hits": 39,
            "miss": false
          },
          "35": {
            "source": "           // if (out.indexOf(prefix) === -1) {",
            "miss": false
          },
          "36": {
            "source": "           //     out.push(prefix);",
            "miss": false
          },
          "37": {
            "source": "           // }",
            "miss": false
          },
          "38": {
            "source": "            out.push(route);",
            "hits": 39,
            "miss": false
          },
          "39": {
            "source": "        }",
            "miss": false
          },
          "40": {
            "source": "        x++;",
            "hits": 117,
            "miss": false
          },
          "41": {
            "source": "    }",
            "miss": false
          },
          "42": {
            "source": "    return out;",
            "hits": 32,
            "miss": false
          },
          "43": {
            "source": "}",
            "miss": false
          },
          "44": {
            "source": "",
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "",
            "miss": false
          },
          "47": {
            "source": "/**",
            "miss": false
          },
          "48": {
            "source": " * get a group name from url path segments",
            "miss": false
          },
          "49": {
            "source": " *",
            "miss": false
          },
          "50": {
            "source": " * @param  {Object} settings",
            "miss": false
          },
          "51": {
            "source": " * @param  {String} path",
            "miss": false
          },
          "52": {
            "source": " * @return {Array}",
            "miss": false
          },
          "53": {
            "source": " */",
            "miss": false
          },
          "54": {
            "source": "group.getNameByPath = function (settings, path) {",
            "hits": 1,
            "miss": false
          },
          "55": {
            "source": "    var i = 0,",
            "hits": 44,
            "miss": false
          },
          "56": {
            "source": "        pathHead = [],",
            "miss": false
          },
          "57": {
            "source": "        prefix,",
            "miss": false
          },
          "58": {
            "source": "        parts;",
            "miss": false
          },
          "59": {
            "source": "        ",
            "miss": false
          },
          "60": {
            "source": "    parts = path.split('/');",
            "hits": 44,
            "miss": false
          },
          "61": {
            "source": "    while (parts.length > 0) {",
            "hits": 44,
            "miss": false
          },
          "62": {
            "source": "        var item = parts.shift();",
            "hits": 91,
            "miss": false
          },
          "63": {
            "source": "        if (item !== '') {",
            "hits": 91,
            "miss": false
          },
          "64": {
            "source": "            pathHead.push(item);",
            "hits": 46,
            "miss": false
          },
          "65": {
            "source": "            // only count when it's a path element (and not the initial /)",
            "miss": false
          },
          "66": {
            "source": "            i++;",
            "hits": 46,
            "miss": false
          },
          "67": {
            "source": "        }",
            "miss": false
          },
          "68": {
            "source": "        //console.log(settings.pathPrefixSize)",
            "miss": false
          },
          "69": {
            "source": "        if (i >= settings.pathPrefixSize) {",
            "hits": 91,
            "miss": false
          },
          "70": {
            "source": "            break;",
            "hits": 42,
            "miss": false
          },
          "71": {
            "source": "        }",
            "miss": false
          },
          "72": {
            "source": "    }",
            "miss": false
          },
          "73": {
            "source": "    prefix = pathHead.join('/');",
            "hits": 44,
            "miss": false
          },
          "74": {
            "source": "    return prefix;",
            "hits": 44,
            "miss": false
          },
          "75": {
            "source": "};",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "group.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/index.js",
        "percent": "100",
        "hits": 149,
        "misses": 0,
        "sloc": 149,
        "source": {
          "1": {
            "source": "",
            "miss": false
          },
          "2": {
            "source": "//'use strict';",
            "miss": false
          },
          "3": {
            "source": "var Url             = require('url'),",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "    Querystring     = require('querystring'),",
            "miss": false
          },
          "5": {
            "source": "    Hoek            = require('hoek'),",
            "miss": false
          },
          "6": {
            "source": "    Boom            = require('boom'),",
            "miss": false
          },
          "7": {
            "source": "    Joi             = require('joi'),",
            "miss": false
          },
          "8": {
            "source": "    Path            = require('path'),",
            "miss": false
          },
          "9": {
            "source": "    builder         = require('../lib/builder');",
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "// schema for plug-in root properties",
            "miss": false
          },
          "13": {
            "source": "var schema = Joi.object({",
            "hits": 1,
            "miss": false
          },
          "14": {
            "source": "    jsonPath: Joi.string(),",
            "miss": false
          },
          "15": {
            "source": "    documentationPath: Joi.string(),",
            "miss": false
          },
          "16": {
            "source": "    swaggerUIPath: Joi.string(),",
            "miss": false
          },
          "17": {
            "source": "    pathPrefixSize: Joi.number().integer().positive(),",
            "miss": false
          },
          "18": {
            "source": "    payloadType: Joi.string().valid(['form', 'json']),",
            "miss": false
          },
          "19": {
            "source": "    enableDocumentationPage: Joi.boolean(),",
            "miss": false
          },
          "20": {
            "source": "    expanded: Joi.string().valid(['none', 'list', 'full'])",
            "miss": false
          },
          "21": {
            "source": "});",
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "// defaults settings for plug-in",
            "miss": false
          },
          "24": {
            "source": "var defaults = {",
            "hits": 1,
            "miss": false
          },
          "25": {
            "source": "        'jsonPath': '/swagger.json',",
            "miss": false
          },
          "26": {
            "source": "        'documentationPath': '/documentation',",
            "miss": false
          },
          "27": {
            "source": "        'swaggerUIPath': '/swaggerui/',",
            "miss": false
          },
          "28": {
            "source": "        'pathPrefixSize': 1,",
            "miss": false
          },
          "29": {
            "source": "        'payloadType': 'json',",
            "miss": false
          },
          "30": {
            "source": "        'enableDocumentationPage': true,",
            "miss": false
          },
          "31": {
            "source": "        'expanded': 'list',   //none, list or full",
            "miss": false
          },
          "32": {
            "source": "        'lang': 'en'",
            "miss": false
          },
          "33": {
            "source": "    };",
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "/**",
            "miss": false
          },
          "36": {
            "source": " * register the plug-in with the Hapi framework",
            "miss": false
          },
          "37": {
            "source": " *",
            "miss": false
          },
          "38": {
            "source": " * @param  {Object} plugin",
            "miss": false
          },
          "39": {
            "source": " * @param  {Object} options",
            "miss": false
          },
          "40": {
            "source": " * @param  {function} next",
            "miss": false
          },
          "41": {
            "source": " */",
            "miss": false
          },
          "42": {
            "source": "exports.register = function (plugin, options, next) {",
            "hits": 1,
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "    var settings = Hoek.applyToDefaults(defaults, options),",
            "hits": 37,
            "miss": false
          },
          "45": {
            "source": "        swaggerDirPath = __dirname + Path.sep + '..' + Path.sep + 'public' + Path.sep + 'swaggerui';",
            "miss": false
          },
          "46": {
            "source": "        ",
            "miss": false
          },
          "47": {
            "source": "    Hoek.assert(plugin.registrations.vision, 'Missing vision plug-in registation');",
            "hits": 37,
            "miss": false
          },
          "48": {
            "source": "    Hoek.assert(plugin.registrations.inert, 'Missing inert plug-in registation');   ",
            "hits": 36,
            "miss": false
          },
          "49": {
            "source": "        ",
            "miss": false
          },
          "50": {
            "source": "       ",
            "miss": false
          },
          "51": {
            "source": "    // add routing for swaggerui static assets /swaggerui/",
            "miss": false
          },
          "52": {
            "source": "    plugin.views({",
            "hits": 35,
            "miss": false
          },
          "53": {
            "source": "        engines: {",
            "miss": false
          },
          "54": {
            "source": "            html: {",
            "miss": false
          },
          "55": {
            "source": "                module: require('handlebars')",
            "miss": false
          },
          "56": {
            "source": "            }",
            "miss": false
          },
          "57": {
            "source": "        },",
            "miss": false
          },
          "58": {
            "source": "        path: swaggerDirPath",
            "miss": false
          },
          "59": {
            "source": "    });",
            "miss": false
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "    // add routing swagger json",
            "miss": false
          },
          "62": {
            "source": "    plugin.route([{",
            "hits": 35,
            "miss": false
          },
          "63": {
            "source": "        method: 'GET',",
            "miss": false
          },
          "64": {
            "source": "        path: settings.jsonPath,",
            "miss": false
          },
          "65": {
            "source": "        config: buildSwaggerJSON(settings)",
            "miss": false
          },
          "66": {
            "source": "    }]);",
            "miss": false
          },
          "67": {
            "source": "    ",
            "miss": false
          },
          "68": {
            "source": "    ",
            "miss": false
          },
          "69": {
            "source": "    // add routing for swagger ui",
            "miss": false
          },
          "70": {
            "source": "    if(settings.enableDocumentationPage === true){",
            "hits": 35,
            "miss": false
          },
          "71": {
            "source": "        plugin.route([{",
            "hits": 34,
            "miss": false
          },
          "72": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "73": {
            "source": "            path: settings.documentationPath,            ",
            "miss": false
          },
          "74": {
            "source": "            config: {",
            "miss": false
          },
          "75": {
            "source": "            auth: settings.auth,",
            "miss": false
          },
          "76": {
            "source": "            },",
            "miss": false
          },
          "77": {
            "source": "            handler: function(request, reply) {",
            "miss": false
          },
          "78": {
            "source": "                reply.view('index.html', {});",
            "hits": 3,
            "miss": false
          },
          "79": {
            "source": "            }",
            "miss": false
          },
          "80": {
            "source": "        },{",
            "miss": false
          },
          "81": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "82": {
            "source": "            path: settings.swaggerUIPath + '{path*}',",
            "miss": false
          },
          "83": {
            "source": "            config: {",
            "miss": false
          },
          "84": {
            "source": "                auth: settings.auth",
            "miss": false
          },
          "85": {
            "source": "            },",
            "miss": false
          },
          "86": {
            "source": "            handler: {",
            "miss": false
          },
          "87": {
            "source": "                directory: {",
            "miss": false
          },
          "88": {
            "source": "                    path: swaggerDirPath + Path.sep,",
            "miss": false
          },
          "89": {
            "source": "                    listing: true,",
            "miss": false
          },
          "90": {
            "source": "                    index: false",
            "miss": false
          },
          "91": {
            "source": "                }",
            "miss": false
          },
          "92": {
            "source": "            }",
            "miss": false
          },
          "93": {
            "source": "        }]);",
            "miss": false
          },
          "94": {
            "source": "    }",
            "miss": false
          },
          "95": {
            "source": "    ",
            "miss": false
          },
          "96": {
            "source": "    ",
            "miss": false
          },
          "97": {
            "source": "",
            "miss": false
          },
          "98": {
            "source": "    appendDataContext( plugin, settings );  ",
            "hits": 35,
            "miss": false
          },
          "99": {
            "source": "    next();",
            "hits": 35,
            "miss": false
          },
          "100": {
            "source": "};",
            "miss": false
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "",
            "miss": false
          },
          "103": {
            "source": "/**",
            "miss": false
          },
          "104": {
            "source": " * attributes for plug-in uses 'name' and 'version' from package.json files",
            "miss": false
          },
          "105": {
            "source": " */\t",
            "miss": false
          },
          "106": {
            "source": "exports.register.attributes = {",
            "hits": 1,
            "miss": false
          },
          "107": {
            "source": "    pkg: require('../package.json')",
            "miss": false
          },
          "108": {
            "source": "};",
            "miss": false
          },
          "109": {
            "source": "",
            "miss": false
          },
          "110": {
            "source": "",
            "miss": false
          },
          "111": {
            "source": "/**",
            "miss": false
          },
          "112": {
            "source": " * appends settings data in template context",
            "miss": false
          },
          "113": {
            "source": " *",
            "miss": false
          },
          "114": {
            "source": " * @param  {Object} plugin",
            "miss": false
          },
          "115": {
            "source": " * @param  {Object} options",
            "miss": false
          },
          "116": {
            "source": " * @return {Object}",
            "miss": false
          },
          "117": {
            "source": " */\t",
            "miss": false
          },
          "118": {
            "source": "function appendDataContext( plugin, settings ) {",
            "hits": 1,
            "miss": false
          },
          "119": {
            "source": "    plugin.ext('onPostHandler', function (request, reply) {",
            "hits": 35,
            "miss": false
          },
          "120": {
            "source": "        var response = request.response;",
            "hits": 38,
            "miss": false
          },
          "121": {
            "source": "        // if the reply is a view add settings data into template system",
            "miss": false
          },
          "122": {
            "source": "        if (response.variety === 'view') {",
            "hits": 38,
            "miss": false
          },
          "123": {
            "source": "            // append tags from document request to JSON request",
            "miss": false
          },
          "124": {
            "source": "            if(request.query.tags){",
            "hits": 3,
            "miss": false
          },
          "125": {
            "source": "                settings.jsonPath = appendQueryString( settings.jsonPath, 'tags', request.query.tags );",
            "hits": 1,
            "miss": false
          },
          "126": {
            "source": "            }",
            "miss": false
          },
          "127": {
            "source": "            response.source.context['hapiSwagger'] = settings",
            "hits": 3,
            "miss": false
          },
          "128": {
            "source": "        }",
            "miss": false
          },
          "129": {
            "source": "        return reply.continue();",
            "hits": 38,
            "miss": false
          },
          "130": {
            "source": "    });",
            "miss": false
          },
          "131": {
            "source": "};",
            "miss": false
          },
          "132": {
            "source": "",
            "miss": false
          },
          "133": {
            "source": "",
            "miss": false
          },
          "134": {
            "source": "/**",
            "miss": false
          },
          "135": {
            "source": " * builds swagger JSON",
            "miss": false
          },
          "136": {
            "source": " *",
            "miss": false
          },
          "137": {
            "source": " * @param  {Object} settings",
            "miss": false
          },
          "138": {
            "source": " * @return {Object}",
            "miss": false
          },
          "139": {
            "source": " */\t",
            "miss": false
          },
          "140": {
            "source": "function buildSwaggerJSON( settings ){",
            "hits": 1,
            "miss": false
          },
          "141": {
            "source": "    return {",
            "hits": 35,
            "miss": false
          },
          "142": {
            "source": "        auth: settings.auth,",
            "miss": false
          },
          "143": {
            "source": "        handler: function (request, reply) {",
            "miss": false
          },
          "144": {
            "source": "            reply(builder.getSwaggerJSON( settings, request ))",
            "hits": 32,
            "miss": false
          },
          "145": {
            "source": "        },",
            "miss": false
          },
          "146": {
            "source": "        plugins: {",
            "miss": false
          },
          "147": {
            "source": "            \"hapi-swagger\": false",
            "miss": false
          },
          "148": {
            "source": "        }",
            "miss": false
          },
          "149": {
            "source": "    }",
            "miss": false
          },
          "150": {
            "source": "}",
            "miss": false
          },
          "151": {
            "source": "",
            "miss": false
          },
          "152": {
            "source": "",
            "miss": false
          },
          "153": {
            "source": "/**",
            "miss": false
          },
          "154": {
            "source": " * appends a querystring to a url path - will overright existings values",
            "miss": false
          },
          "155": {
            "source": " *",
            "miss": false
          },
          "156": {
            "source": " * @param  {String} url",
            "miss": false
          },
          "157": {
            "source": " * @param  {String} qsName",
            "miss": false
          },
          "158": {
            "source": " * @param  {String} qsValue",
            "miss": false
          },
          "159": {
            "source": " * @return {String}",
            "miss": false
          },
          "160": {
            "source": " */\t",
            "miss": false
          },
          "161": {
            "source": "function appendQueryString( url, qsName, qsValue ){",
            "hits": 1,
            "miss": false
          },
          "162": {
            "source": "    var urlObj = Url.parse( url );",
            "hits": 1,
            "miss": false
          },
          "163": {
            "source": "    urlObj.query = Querystring.parse(qsName + '=' + qsValue);",
            "hits": 1,
            "miss": false
          },
          "164": {
            "source": "    return urlObj.format( urlObj );",
            "hits": 1,
            "miss": false
          },
          "165": {
            "source": "}",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "index.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/info.js",
        "percent": "100",
        "hits": 40,
        "misses": 0,
        "sloc": 40,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Builds the swagger JSON file info section",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "'use strict';",
            "miss": false
          },
          "7": {
            "source": "var Hoek                    = require('hoek'),",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "    Boom                    = require('boom'),",
            "miss": false
          },
          "9": {
            "source": "    Joi                     = require('joi');",
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "\t",
            "miss": false
          },
          "12": {
            "source": "var info = module.exports = {};\t",
            "hits": 1,
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "// default data for info",
            "miss": false
          },
          "16": {
            "source": "info.defaults = {",
            "hits": 1,
            "miss": false
          },
          "17": {
            "source": "    title: 'API documentation'",
            "miss": false
          },
          "18": {
            "source": "}",
            "miss": false
          },
          "19": {
            "source": "",
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "// schema for info",
            "miss": false
          },
          "22": {
            "source": "info.schema = Joi.object({",
            "hits": 1,
            "miss": false
          },
          "23": {
            "source": "    title: Joi.string().required(),",
            "miss": false
          },
          "24": {
            "source": "    description: Joi.string(),",
            "miss": false
          },
          "25": {
            "source": "    termsOfService: Joi.string(),",
            "miss": false
          },
          "26": {
            "source": "    contact: Joi.object({",
            "miss": false
          },
          "27": {
            "source": "        name: Joi.string(),",
            "miss": false
          },
          "28": {
            "source": "        url: Joi.string().uri(),",
            "miss": false
          },
          "29": {
            "source": "        email: Joi.string().email(),",
            "miss": false
          },
          "30": {
            "source": "    }),",
            "miss": false
          },
          "31": {
            "source": "    license: Joi.object({",
            "miss": false
          },
          "32": {
            "source": "        name: Joi.string(),",
            "miss": false
          },
          "33": {
            "source": "        url: Joi.string().uri(),",
            "miss": false
          },
          "34": {
            "source": "    }),",
            "miss": false
          },
          "35": {
            "source": "    version: Joi.string()",
            "miss": false
          },
          "36": {
            "source": "});",
            "miss": false
          },
          "37": {
            "source": "",
            "miss": false
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "/**",
            "miss": false
          },
          "40": {
            "source": " * build the swagger info section",
            "miss": false
          },
          "41": {
            "source": " *",
            "miss": false
          },
          "42": {
            "source": " * @param  {Object} options",
            "miss": false
          },
          "43": {
            "source": " * @return {Object}",
            "miss": false
          },
          "44": {
            "source": " */\t",
            "miss": false
          },
          "45": {
            "source": "info.build = function( options ){",
            "hits": 1,
            "miss": false
          },
          "46": {
            "source": "    var out =  (options.info)? Hoek.applyToDefaults(info.defaults, options.info) : info.defaults;",
            "hits": 32,
            "miss": false
          },
          "47": {
            "source": "    Joi.assert(out, info.schema);",
            "hits": 32,
            "miss": false
          },
          "48": {
            "source": "    return out;",
            "hits": 32,
            "miss": false
          },
          "49": {
            "source": "}",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "info.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/paths.js",
        "percent": "78.12",
        "hits": 382,
        "misses": 107,
        "sloc": 489,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Builds the swagger JSON file path section",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "'use strict';",
            "miss": false
          },
          "7": {
            "source": "var Hoek                    = require('hoek'),",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "    Boom                    = require('boom'),",
            "miss": false
          },
          "9": {
            "source": "    Joi                     = require('joi'),",
            "miss": false
          },
          "10": {
            "source": "    ShortId                 = require('shortid'),",
            "miss": false
          },
          "11": {
            "source": "    Group                   = require('../lib/group'),",
            "miss": false
          },
          "12": {
            "source": "    Definitions             = require('../lib/definitions'),",
            "miss": false
          },
          "13": {
            "source": "    Utilities               = require('../lib/utilities');",
            "miss": false
          },
          "14": {
            "source": "\t",
            "miss": false
          },
          "15": {
            "source": "var paths = module.exports = {},",
            "hits": 1,
            "miss": false
          },
          "16": {
            "source": "    internals = {};\t",
            "miss": false
          },
          "17": {
            "source": "    ",
            "miss": false
          },
          "18": {
            "source": "\t",
            "miss": false
          },
          "19": {
            "source": "paths.build = function( settings, routes ){",
            "hits": 1,
            "miss": false
          },
          "20": {
            "source": "   ",
            "miss": false
          },
          "21": {
            "source": "    var routesData = [];",
            "hits": 32,
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "    routes.forEach(function (route) {",
            "hits": 32,
            "miss": false
          },
          "24": {
            "source": "        // only include routes tagged with \"api\"",
            "miss": false
          },
          "25": {
            "source": "        if (!route.settings.tags || route.settings.tags.indexOf('api') < 0) return;",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "!route.settings.tags",
                "miss": "false"
              },
              {
                "source": " || route.settings.tags.indexOf('api') < 0) return;"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "26": {
            "source": "        ",
            "miss": false
          },
          "27": {
            "source": "       // console.log(route.path,route.method)",
            "miss": false
          },
          "28": {
            "source": "",
            "miss": false
          },
          "29": {
            "source": "        var routeOptions = route.settings.plugins ? route.settings.plugins['hapi-swagger'] : {};",
            "chunks": [
              {
                "source": "        var routeOptions = "
              },
              {
                "source": "route.settings.plugins",
                "miss": "true"
              },
              {
                "source": " ? route.settings.plugins['hapi-swagger'] : "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ";"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "30": {
            "source": "        var routeData = {",
            "hits": 39,
            "miss": false
          },
          "31": {
            "source": "            path: route.path,",
            "miss": false
          },
          "32": {
            "source": "            method: route.method.toUpperCase(),",
            "miss": false
          },
          "33": {
            "source": "            description: route.settings.description,",
            "miss": false
          },
          "34": {
            "source": "            notes: route.settings.notes,",
            "miss": false
          },
          "35": {
            "source": "            authorizations: {},",
            "miss": false
          },
          "36": {
            "source": "            tags: Hoek.reach(route,'settings.tags'),",
            "miss": false
          },
          "37": {
            "source": "            queryParams: Hoek.reach(route,'settings.validate.query'),",
            "miss": false
          },
          "38": {
            "source": "            pathParams: Hoek.reach(route,'settings.validate.params'),",
            "miss": false
          },
          "39": {
            "source": "            payloadParams: Hoek.reach(route,'settings.validate.payload'),",
            "miss": false
          },
          "40": {
            "source": "            responseSchema: Hoek.reach(route,'settings.response.schema'),",
            "miss": false
          },
          "41": {
            "source": "            headerParams: Hoek.reach(route,'settings.validate.headers'),",
            "miss": false
          },
          "42": {
            "source": "            responseMessages: routeOptions && routeOptions.responseMessages || [],",
            "chunks": [
              {
                "source": "            responseMessages: routeOptions && "
              },
              {
                "source": "routeOptions.responseMessages",
                "miss": "false"
              },
              {
                "source": " || [],"
              }
            ],
            "miss": true
          },
          "43": {
            "source": "            nickname: routeOptions && routeOptions.nickname || null,",
            "chunks": [
              {
                "source": "            nickname: routeOptions && "
              },
              {
                "source": "routeOptions.nickname",
                "miss": "true"
              },
              {
                "source": " || null,"
              }
            ],
            "miss": true
          },
          "44": {
            "source": "            payloadType: routeOptions && routeOptions.payloadType || null,",
            "chunks": [
              {
                "source": "            payloadType: routeOptions && "
              },
              {
                "source": "routeOptions.payloadType",
                "miss": "false"
              },
              {
                "source": " || null,"
              }
            ],
            "miss": true
          },
          "45": {
            "source": "            groups: route.group",
            "miss": false
          },
          "46": {
            "source": "        };",
            "miss": false
          },
          "47": {
            "source": "",
            "miss": false
          },
          "48": {
            "source": "",
            "miss": false
          },
          "49": {
            "source": "        // user configured interface through route plugin options",
            "miss": false
          },
          "50": {
            "source": "        if( Hoek.reach(routeOptions, 'validate.query') ){",
            "hits": 39,
            "miss": false
          },
          "51": {
            "source": "            routeData.queryParams =  internals.paramObjectToArray( Hoek.reach(routeOptions, 'validate.query') );",
            "hits": 1,
            "miss": false
          },
          "52": {
            "source": "        }",
            "miss": false
          },
          "53": {
            "source": "        if( Hoek.reach(routeOptions,'validate.params') ){",
            "hits": 39,
            "miss": false
          },
          "54": {
            "source": "            routeData.pathParams =  internals.paramObjectToArray( Hoek.reach(routeOptions,'validate.params') );",
            "hits": 2,
            "miss": false
          },
          "55": {
            "source": "        }",
            "miss": false
          },
          "56": {
            "source": "        if( Hoek.reach(routeOptions, 'validate.payload') ){",
            "hits": 39,
            "miss": false
          },
          "57": {
            "source": "            routeData.payloadParams =  internals.paramObjectToArray( Hoek.reach(routeOptions, 'validate.payload') );",
            "hits": 1,
            "miss": false
          },
          "58": {
            "source": "        }",
            "miss": false
          },
          "59": {
            "source": "        if( Hoek.reach(routeOptions, 'validate.headers') ){",
            "hits": 39,
            "miss": false
          },
          "60": {
            "source": "            routeData.headerParams =  internals.paramObjectToArray( Hoek.reach(routeOptions, 'validate.headers') );",
            "hits": 1,
            "miss": false
          },
          "61": {
            "source": "        }",
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "        if(route.settings.auth && settings.authorizations) {",
            "chunks": [
              {
                "source": "        if("
              },
              {
                "source": "route.settings.auth",
                "miss": "false"
              },
              {
                "source": " && "
              },
              {
                "source": "settings.authorizations",
                "miss": "never"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "65": {
            "source": "            route.settings.auth.strategies.forEach(function(strategie) {",
            "hits": 0,
            "miss": true
          },
          "66": {
            "source": "                if(settings.authorizations[strategie] && settings.authorizations[strategie].type){",
            "hits": 0,
            "miss": true
          },
          "67": {
            "source": "                   routeData.authorizations[settings.authorizations[strategie].type] = settings.authorizations[strategie]",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "                }",
            "miss": false
          },
          "69": {
            "source": "            });",
            "miss": false
          },
          "70": {
            "source": "        }",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "        // hapi wildcard or array support for methods",
            "miss": false
          },
          "73": {
            "source": "        if(routeData.method === '*' || Array.isArray(routeData.method)){",
            "chunks": [
              {
                "source": "        if("
              },
              {
                "source": "routeData.method === '*'",
                "miss": "false"
              },
              {
                "source": " || Array.isArray(routeData.method)){"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "74": {
            "source": "            // OPTIONS not supported by Swagger and HEAD not support by HAPI",
            "miss": false
          },
          "75": {
            "source": "            var methods = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"];",
            "hits": 0,
            "miss": true
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "            if(Array.isArray(routeData.method)){",
            "hits": 0,
            "miss": true
          },
          "78": {
            "source": "                methods = routeData.method.filter(function( value ){",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "                    return (value.toUpperCase() !== \"OPTIONS\" || value.toUpperCase() !== \"HEAD\");",
            "hits": 0,
            "miss": true
          },
          "80": {
            "source": "                });",
            "miss": false
          },
          "81": {
            "source": "            }",
            "miss": false
          },
          "82": {
            "source": "",
            "miss": false
          },
          "83": {
            "source": "            methods.forEach(function (method) {",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "                var newRoute = Hoek.clone( routeData );",
            "hits": 0,
            "miss": true
          },
          "85": {
            "source": "                newRoute.method = method.toUpperCase();;",
            "hits": 0,
            "miss": true
          },
          "86": {
            "source": "                routesData.push(newRoute);",
            "hits": 0,
            "miss": true
          },
          "87": {
            "source": "            });",
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "        }else{",
            "miss": false
          },
          "90": {
            "source": "           routesData.push(routeData);",
            "hits": 39,
            "miss": false
          },
          "91": {
            "source": "        }",
            "miss": false
          },
          "92": {
            "source": "    });",
            "miss": false
          },
          "93": {
            "source": "    ",
            "miss": false
          },
          "94": {
            "source": "    //console.log(routesData);",
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "    return paths.properties( settings, routesData);",
            "hits": 32,
            "miss": false
          },
          "97": {
            "source": "    ",
            "miss": false
          },
          "98": {
            "source": "    ",
            "miss": false
          },
          "99": {
            "source": "}",
            "miss": false
          },
          "100": {
            "source": "",
            "miss": false
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "paths.properties = function( settings, routes ){",
            "hits": 1,
            "miss": false
          },
          "103": {
            "source": "    ",
            "miss": false
          },
          "104": {
            "source": "    var swagger = {definitions: {}},",
            "hits": 32,
            "miss": false
          },
          "105": {
            "source": "        pathObj = {};",
            "miss": false
          },
          "106": {
            "source": "    ",
            "miss": false
          },
          "107": {
            "source": "    routes.forEach(function (route, indexA) {",
            "hits": 32,
            "miss": false
          },
          "108": {
            "source": "        ",
            "miss": false
          },
          "109": {
            "source": "        //console.log(route.path,route.method)",
            "miss": false
          },
          "110": {
            "source": "        ",
            "miss": false
          },
          "111": {
            "source": "        var path = route.path,",
            "hits": 39,
            "miss": false
          },
          "112": {
            "source": "            method = route.method,",
            "miss": false
          },
          "113": {
            "source": "            out = {",
            "miss": false
          },
          "114": {
            "source": "                \"summary\": route.description, ",
            "miss": false
          },
          "115": {
            "source": "                \"security\":   Utilities.hasProperties(route.authorizations)? [route.authorizations] : [],",
            "chunks": [
              {
                "source": "                \"security\":   "
              },
              {
                "source": "Utilities.hasProperties(route.authorizations)",
                "miss": "false"
              },
              {
                "source": "? "
              },
              {
                "source": "[route.authorizations]",
                "miss": "never"
              },
              {
                "source": " : [],"
              }
            ],
            "miss": true
          },
          "116": {
            "source": "                \"operationId\": route.nickname || route.path.replace(/\\//gi, '').replace(/\\{/gi, '').replace(/\\}/gi, ''),",
            "miss": false
          },
          "117": {
            "source": "                \"description\": route.notes,",
            "miss": false
          },
          "118": {
            "source": "                \"parameters\": []",
            "miss": false
          },
          "119": {
            "source": "            };",
            "miss": false
          },
          "120": {
            "source": "            ",
            "miss": false
          },
          "121": {
            "source": "        if(route.groups){",
            "chunks": [
              {
                "source": "        if("
              },
              {
                "source": "route.groups",
                "miss": "true"
              },
              {
                "source": "){"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "122": {
            "source": "            out.tags = route.groups;",
            "hits": 39,
            "miss": false
          },
          "123": {
            "source": "        }",
            "miss": false
          },
          "124": {
            "source": "",
            "miss": false
          },
          "125": {
            "source": "        out.description = Array.isArray(route.notes) ? route.notes.join('<br/><br/>') : route.notes;",
            "chunks": [
              {
                "source": "        out.description = "
              },
              {
                "source": "Array.isArray(route.notes)",
                "miss": "false"
              },
              {
                "source": " ? "
              },
              {
                "source": "route.notes.join('<br/><br/>')",
                "miss": "never"
              },
              {
                "source": " : route.notes;"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "126": {
            "source": "        out.responses = (route.responses)? route.responses: {\"200\": {\"description\": \"Successful\"}};",
            "chunks": [
              {
                "source": "        out.responses = ("
              },
              {
                "source": "route.responses",
                "miss": "false"
              },
              {
                "source": ")? "
              },
              {
                "source": "route.responses",
                "miss": "never"
              },
              {
                "source": ": {\"200\": {\"description\": \"Successful\"}};"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "127": {
            "source": "",
            "miss": false
          },
          "128": {
            "source": "        var pathParam = internals.getParams(route, 'pathParams')",
            "hits": 39,
            "miss": false
          },
          "129": {
            "source": "        var queryParam = internals.getParams(route, 'queryParams')",
            "hits": 39,
            "miss": false
          },
          "130": {
            "source": "        var headerParam = internals.getParams(route, 'headerParams')",
            "hits": 39,
            "miss": false
          },
          "131": {
            "source": "",
            "miss": false
          },
          "132": {
            "source": "        // build up swagger properties for route validation",
            "miss": false
          },
          "133": {
            "source": "        var pathProperties = internals.validatorsToProperties(pathParam, swagger.definitions);",
            "hits": 39,
            "miss": false
          },
          "134": {
            "source": "        var queryProperties = internals.validatorsToProperties(queryParam, swagger.definitions);",
            "hits": 39,
            "miss": false
          },
          "135": {
            "source": "        var headerProperties = internals.validatorsToProperties(headerParam, swagger.definitions);",
            "hits": 39,
            "miss": false
          },
          "136": {
            "source": "        var payloadApiParams;",
            "hits": 39,
            "miss": false
          },
          "137": {
            "source": "",
            "miss": false
          },
          "138": {
            "source": "        // set globally or locally to route",
            "miss": false
          },
          "139": {
            "source": "        var payloadType = settings.payloadType",
            "hits": 39,
            "miss": false
          },
          "140": {
            "source": "        if(route.payloadType){",
            "chunks": [
              {
                "source": "        if("
              },
              {
                "source": "route.payloadType",
                "miss": "false"
              },
              {
                "source": "){"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "141": {
            "source": "            payloadType = route.payloadType;",
            "hits": 0,
            "miss": true
          },
          "142": {
            "source": "        }",
            "miss": false
          },
          "143": {
            "source": "        ",
            "miss": false
          },
          "144": {
            "source": "",
            "miss": false
          },
          "145": {
            "source": "        if (payloadType && payloadType.toLowerCase() === 'json') {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "payloadType",
                "miss": "true"
              },
              {
                "source": " && payloadType.toLowerCase() === 'json') {"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "146": {
            "source": "            // set as json",
            "miss": false
          },
          "147": {
            "source": "            var payloadProperty = internals.validatorToProperty(out.nickname, route.payloadParams, swagger.definitions);",
            "hits": 38,
            "miss": false
          },
          "148": {
            "source": "            if (payloadProperty && payloadProperty.type !== 'void') {",
            "hits": 38,
            "miss": false
          },
          "149": {
            "source": "                payloadProperty.required = true;",
            "hits": 10,
            "miss": false
          },
          "150": {
            "source": "                out.consumes = settings.consumes || ['application/json'];",
            "chunks": [
              {
                "source": "                out.consumes = "
              },
              {
                "source": "settings.consumes",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "['application/json']",
                "miss": "never"
              },
              {
                "source": ";"
              }
            ],
            "hits": 10,
            "miss": true
          },
          "151": {
            "source": "            }",
            "miss": false
          },
          "152": {
            "source": "            // build single item with in: body",
            "miss": false
          },
          "153": {
            "source": "            ",
            "miss": false
          },
          "154": {
            "source": "           var payloadParam = internals.getParams(route, 'payloadParams')",
            "hits": 38,
            "miss": false
          },
          "155": {
            "source": "           var payloadProperties = internals.validatorsToProperties(payloadParam, swagger.definitions);",
            "hits": 38,
            "miss": false
          },
          "156": {
            "source": "           var x = internals.propertiesToAPIParams(payloadProperties, null);",
            "hits": 38,
            "miss": false
          },
          "157": {
            "source": "           ",
            "miss": false
          },
          "158": {
            "source": "           //console.log( JSON.stringify( payloadParam ) )",
            "miss": false
          },
          "159": {
            "source": "           ",
            "miss": false
          },
          "160": {
            "source": "           if(payloadParam !== null){",
            "hits": 38,
            "miss": false
          },
          "161": {
            "source": "            payloadApiParams = {",
            "hits": 10,
            "miss": false
          },
          "162": {
            "source": "                \"in\": \"body\",",
            "miss": false
          },
          "163": {
            "source": "                \"name\": \"body\",",
            "miss": false
          },
          "164": {
            "source": "                \"description\": \"order placed for purchasing the pet\",",
            "miss": false
          },
          "165": {
            "source": "                \"required\": true,",
            "miss": false
          },
          "166": {
            "source": "                \"schema\": Definitions.build( x )",
            "miss": false
          },
          "167": {
            "source": "            }",
            "miss": false
          },
          "168": {
            "source": "           }",
            "miss": false
          },
          "169": {
            "source": "           ",
            "miss": false
          },
          "170": {
            "source": "           ",
            "miss": false
          },
          "171": {
            "source": "            ",
            "miss": false
          },
          "172": {
            "source": "        //    payloadApiParams = internals.propertiesToAPIParams({",
            "miss": false
          },
          "173": {
            "source": "        //        body: payloadProperty",
            "miss": false
          },
          "174": {
            "source": "        //    }, 'body');",
            "miss": false
          },
          "175": {
            "source": "            ",
            "miss": false
          },
          "176": {
            "source": "            ",
            "miss": false
          },
          "177": {
            "source": "        } else {",
            "miss": false
          },
          "178": {
            "source": "            // set as form",
            "miss": false
          },
          "179": {
            "source": "            var payloadParam = internals.getParams(route, 'payloadParams')",
            "hits": 1,
            "miss": false
          },
          "180": {
            "source": "            var payloadProperties = internals.validatorsToProperties(payloadParam, swagger.definitions);",
            "hits": 1,
            "miss": false
          },
          "181": {
            "source": "            payloadApiParams = internals.propertiesToAPIParams(payloadProperties, 'formData');",
            "hits": 1,
            "miss": false
          },
          "182": {
            "source": "        }",
            "miss": false
          },
          "183": {
            "source": "",
            "miss": false
          },
          "184": {
            "source": "",
            "miss": false
          },
          "185": {
            "source": "        // add the path, query and body parameters",
            "miss": false
          },
          "186": {
            "source": "        out.parameters = out.parameters.concat(",
            "hits": 39,
            "miss": false
          },
          "187": {
            "source": "            internals.propertiesToAPIParams(headerProperties, 'header'),",
            "miss": false
          },
          "188": {
            "source": "            internals.propertiesToAPIParams(pathProperties, 'path'),",
            "miss": false
          },
          "189": {
            "source": "            internals.propertiesToAPIParams(queryProperties, 'query')",
            "miss": false
          },
          "190": {
            "source": "        );",
            "miss": false
          },
          "191": {
            "source": "        ",
            "miss": false
          },
          "192": {
            "source": "        if(payloadApiParams){",
            "hits": 39,
            "miss": false
          },
          "193": {
            "source": "            out.parameters = out.parameters.concat( payloadApiParams )",
            "hits": 11,
            "miss": false
          },
          "194": {
            "source": "        }",
            "miss": false
          },
          "195": {
            "source": "",
            "miss": false
          },
          "196": {
            "source": "        // set response type and definition",
            "miss": false
          },
          "197": {
            "source": "        // If the responseSchema is a joi object, response className can be set as an option:",
            "miss": false
          },
          "198": {
            "source": "        // Example: route.responseSchema = Joi.object({foo:Joi.string()}).options({className:\"MyResponseClass\"});",
            "miss": false
          },
          "199": {
            "source": "",
            "miss": false
          },
          "200": {
            "source": "        var responseClassName = internals._getClassName(route.responseSchema),",
            "hits": 39,
            "miss": false
          },
          "201": {
            "source": "            altClassName = out.nickname + '_' + route.method + '_response';",
            "miss": false
          },
          "202": {
            "source": "",
            "miss": false
          },
          "203": {
            "source": "        responseClassName = responseClassName || altClassName;",
            "chunks": [
              {
                "source": "        responseClassName = "
              },
              {
                "source": "responseClassName",
                "miss": "false"
              },
              {
                "source": " || altClassName;"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "204": {
            "source": "",
            "miss": false
          },
          "205": {
            "source": "        var responseProperty = internals.validatorToProperty(",
            "hits": 39,
            "miss": false
          },
          "206": {
            "source": "                responseClassName,",
            "miss": false
          },
          "207": {
            "source": "                internals.getParams(route, 'responseSchema'),",
            "miss": false
          },
          "208": {
            "source": "                swagger.definitions,",
            "miss": false
          },
          "209": {
            "source": "                null",
            "miss": false
          },
          "210": {
            "source": "            );",
            "miss": false
          },
          "211": {
            "source": "",
            "miss": false
          },
          "212": {
            "source": "        if (responseProperty) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "responseProperty",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "213": {
            "source": "            //out.type = responseProperty.type || 'void';",
            "miss": false
          },
          "214": {
            "source": "            //if (out.type !== 'void') {",
            "miss": false
          },
          "215": {
            "source": "            //    out.produces = settings.produces;",
            "miss": false
          },
          "216": {
            "source": "            //}",
            "miss": false
          },
          "217": {
            "source": "            if(responseProperty.items) {",
            "hits": 0,
            "miss": true
          },
          "218": {
            "source": "                // add these to the api operations",
            "miss": false
          },
          "219": {
            "source": "                out.items = responseProperty.items;",
            "hits": 0,
            "miss": true
          },
          "220": {
            "source": "            }",
            "miss": false
          },
          "221": {
            "source": "        }",
            "miss": false
          },
          "222": {
            "source": "",
            "miss": false
          },
          "223": {
            "source": "        if(!pathObj[path]){",
            "chunks": [
              {
                "source": "        if("
              },
              {
                "source": "!pathObj[path]",
                "miss": "true"
              },
              {
                "source": "){"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "224": {
            "source": "            pathObj[path] = {};",
            "hits": 39,
            "miss": false
          },
          "225": {
            "source": "        }",
            "miss": false
          },
          "226": {
            "source": "        pathObj[path][method.toLowerCase()] = out;",
            "hits": 39,
            "miss": false
          },
          "227": {
            "source": "       ",
            "miss": false
          },
          "228": {
            "source": "",
            "miss": false
          },
          "229": {
            "source": "        //console.log(JSON.stringify(swagger.definitions))",
            "miss": false
          },
          "230": {
            "source": "    });",
            "miss": false
          },
          "231": {
            "source": "    ",
            "miss": false
          },
          "232": {
            "source": "    swagger.paths = pathObj;",
            "hits": 32,
            "miss": false
          },
          "233": {
            "source": "    return swagger",
            "hits": 32,
            "miss": false
          },
          "234": {
            "source": "}",
            "miss": false
          },
          "235": {
            "source": "",
            "miss": false
          },
          "236": {
            "source": "",
            "miss": false
          },
          "237": {
            "source": "",
            "miss": false
          },
          "238": {
            "source": "",
            "miss": false
          },
          "239": {
            "source": "",
            "miss": false
          },
          "240": {
            "source": "",
            "miss": false
          },
          "241": {
            "source": "",
            "miss": false
          },
          "242": {
            "source": "",
            "miss": false
          },
          "243": {
            "source": "// turn validate into array used internally",
            "miss": false
          },
          "244": {
            "source": "internals.paramObjectToArray = function (obj) {",
            "hits": 1,
            "miss": false
          },
          "245": {
            "source": "     var out = [];",
            "hits": 5,
            "miss": false
          },
          "246": {
            "source": "     for (var key in obj) {",
            "hits": 5,
            "miss": false
          },
          "247": {
            "source": "        if (obj.hasOwnProperty(key)) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "obj.hasOwnProperty(key)",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 8,
            "miss": true
          },
          "248": {
            "source": "            out.push({",
            "hits": 8,
            "miss": false
          },
          "249": {
            "source": "                key: key,",
            "miss": false
          },
          "250": {
            "source": "                schema: obj[key]",
            "miss": false
          },
          "251": {
            "source": "            })",
            "miss": false
          },
          "252": {
            "source": "        }",
            "miss": false
          },
          "253": {
            "source": "     }",
            "miss": false
          },
          "254": {
            "source": "     return out;",
            "hits": 5,
            "miss": false
          },
          "255": {
            "source": "}",
            "miss": false
          },
          "256": {
            "source": "",
            "miss": false
          },
          "257": {
            "source": "",
            "miss": false
          },
          "258": {
            "source": "",
            "miss": false
          },
          "259": {
            "source": "",
            "miss": false
          },
          "260": {
            "source": "",
            "miss": false
          },
          "261": {
            "source": "",
            "miss": false
          },
          "262": {
            "source": "// gets the pramas from route object",
            "miss": false
          },
          "263": {
            "source": "internals.getParams = function (route, name) {",
            "hits": 1,
            "miss": false
          },
          "264": {
            "source": "    var prama = route[name];",
            "hits": 195,
            "miss": false
          },
          "265": {
            "source": "",
            "miss": false
          },
          "266": {
            "source": "    if (route[name] && route[name].isJoi) {",
            "hits": 195,
            "miss": false
          },
          "267": {
            "source": "        if (route[name]._inner.children) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "route[name]._inner.children",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 10,
            "miss": true
          },
          "268": {
            "source": "            prama = route[name]._inner.children;",
            "hits": 10,
            "miss": false
          },
          "269": {
            "source": "        } else {",
            "miss": false
          },
          "270": {
            "source": "            // fix for responseObject array types",
            "miss": false
          },
          "271": {
            "source": "            if (route[name]._type = 'array') {",
            "hits": 0,
            "miss": true
          },
          "272": {
            "source": "                prama = route[name];",
            "hits": 0,
            "miss": true
          },
          "273": {
            "source": "            }",
            "miss": false
          },
          "274": {
            "source": "        }",
            "miss": false
          },
          "275": {
            "source": "    }",
            "miss": false
          },
          "276": {
            "source": "",
            "miss": false
          },
          "277": {
            "source": "    return prama;",
            "hits": 195,
            "miss": false
          },
          "278": {
            "source": "}",
            "miss": false
          },
          "279": {
            "source": "",
            "miss": false
          },
          "280": {
            "source": "",
            "miss": false
          },
          "281": {
            "source": "// convert an object of properties to an api parameter array",
            "miss": false
          },
          "282": {
            "source": "internals.propertiesToAPIParams = function (properties, type) {",
            "hits": 1,
            "miss": false
          },
          "283": {
            "source": "    if (properties === null ||",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "properties === null",
                "miss": "false"
              },
              {
                "source": " ||"
              }
            ],
            "hits": 157,
            "miss": true
          },
          "284": {
            "source": "        properties === undefined ||",
            "chunks": [
              {
                "source": "        "
              },
              {
                "source": "properties === undefined",
                "miss": "false"
              },
              {
                "source": " ||"
              }
            ],
            "miss": true
          },
          "285": {
            "source": "        (typeof properties !== 'object')) {",
            "miss": false
          },
          "286": {
            "source": "        return [];",
            "hits": 0,
            "miss": true
          },
          "287": {
            "source": "    }",
            "miss": false
          },
          "288": {
            "source": "",
            "miss": false
          },
          "289": {
            "source": "    var params = [];",
            "hits": 157,
            "miss": false
          },
          "290": {
            "source": "    var keys = Object.keys(properties);",
            "hits": 157,
            "miss": false
          },
          "291": {
            "source": "    for (var i = 0, il = keys.length; i < il; ++i) {",
            "hits": 157,
            "miss": false
          },
          "292": {
            "source": "        var key = keys[i];",
            "hits": 47,
            "miss": false
          },
          "293": {
            "source": "        var param = properties[key];",
            "hits": 47,
            "miss": false
          },
          "294": {
            "source": "        if (!param) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "!param",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 47,
            "miss": true
          },
          "295": {
            "source": "            continue;",
            "hits": 0,
            "miss": true
          },
          "296": {
            "source": "        }",
            "miss": false
          },
          "297": {
            "source": "        param.name = key;",
            "hits": 47,
            "miss": false
          },
          "298": {
            "source": "        if(type){",
            "hits": 47,
            "miss": false
          },
          "299": {
            "source": "            param.in = type;",
            "hits": 11,
            "miss": false
          },
          "300": {
            "source": "            if (param.type === \"array\") {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "param.type === \"array\"",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 11,
            "miss": true
          },
          "301": {
            "source": "                param.allowMultiple = true;",
            "hits": 0,
            "miss": true
          },
          "302": {
            "source": "            }  ",
            "miss": false
          },
          "303": {
            "source": "        }",
            "miss": false
          },
          "304": {
            "source": "        params.push(param);",
            "hits": 47,
            "miss": false
          },
          "305": {
            "source": "    }",
            "miss": false
          },
          "306": {
            "source": "",
            "miss": false
          },
          "307": {
            "source": "    return params;",
            "hits": 157,
            "miss": false
          },
          "308": {
            "source": "};",
            "miss": false
          },
          "309": {
            "source": "",
            "miss": false
          },
          "310": {
            "source": "",
            "miss": false
          },
          "311": {
            "source": "// convert an object of Joi validators into an object of swagger schema properties",
            "miss": false
          },
          "312": {
            "source": "internals.validatorsToProperties = function (params, definitions, requiredArray) {",
            "hits": 1,
            "miss": false
          },
          "313": {
            "source": "    var i,",
            "hits": 157,
            "miss": false
          },
          "314": {
            "source": "        x,",
            "miss": false
          },
          "315": {
            "source": "        key,",
            "miss": false
          },
          "316": {
            "source": "        param,",
            "miss": false
          },
          "317": {
            "source": "        properties = {};",
            "miss": false
          },
          "318": {
            "source": "",
            "miss": false
          },
          "319": {
            "source": "    if (params === null ||",
            "hits": 157,
            "miss": false
          },
          "320": {
            "source": "        params === undefined ||",
            "chunks": [
              {
                "source": "        "
              },
              {
                "source": "params === undefined",
                "miss": "false"
              },
              {
                "source": " ||"
              }
            ],
            "miss": true
          },
          "321": {
            "source": "        (typeof params !== 'object')) {",
            "miss": false
          },
          "322": {
            "source": "        return [];",
            "hits": 141,
            "miss": false
          },
          "323": {
            "source": "    }",
            "miss": false
          },
          "324": {
            "source": "",
            "miss": false
          },
          "325": {
            "source": "    if (params.isJoi && params._inner.children) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "params.isJoi",
                "miss": "false"
              },
              {
                "source": " && "
              },
              {
                "source": "params._inner.children",
                "miss": "never"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 16,
            "miss": true
          },
          "326": {
            "source": "        params = params._inner.children",
            "hits": 0,
            "miss": true
          },
          "327": {
            "source": "    }",
            "miss": false
          },
          "328": {
            "source": "",
            "miss": false
          },
          "329": {
            "source": "    if (Array.isArray(params)) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "Array.isArray(params)",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 16,
            "miss": true
          },
          "330": {
            "source": "        i = params.length,",
            "hits": 16,
            "miss": false
          },
          "331": {
            "source": "            x = 0;",
            "miss": false
          },
          "332": {
            "source": "        while (x < i) {",
            "hits": 16,
            "miss": false
          },
          "333": {
            "source": "            key = params[x].key;",
            "hits": 47,
            "miss": false
          },
          "334": {
            "source": "            param = params[x].schema;",
            "hits": 47,
            "miss": false
          },
          "335": {
            "source": "            properties[key] = internals.validatorToProperty(key, param, definitions, requiredArray);",
            "hits": 47,
            "miss": false
          },
          "336": {
            "source": "            x++;",
            "hits": 47,
            "miss": false
          },
          "337": {
            "source": "        }",
            "miss": false
          },
          "338": {
            "source": "    }",
            "miss": false
          },
          "339": {
            "source": "",
            "miss": false
          },
          "340": {
            "source": "    return properties;",
            "hits": 16,
            "miss": false
          },
          "341": {
            "source": "};",
            "miss": false
          },
          "342": {
            "source": "",
            "miss": false
          },
          "343": {
            "source": "internals._getClassName = function(schema) {",
            "hits": 1,
            "miss": false
          },
          "344": {
            "source": "    if(schema && schema._meta && Array.isArray(schema._meta)){",
            "chunks": [
              {
                "source": "    if("
              },
              {
                "source": "schema",
                "miss": "false"
              },
              {
                "source": " && "
              },
              {
                "source": "schema._meta",
                "miss": "never"
              },
              {
                "source": " && "
              },
              {
                "source": "Array.isArray(schema._meta)",
                "miss": "never"
              },
              {
                "source": "){"
              }
            ],
            "hits": 39,
            "miss": true
          },
          "345": {
            "source": "        var i = schema._meta.length;",
            "hits": 0,
            "miss": true
          },
          "346": {
            "source": "        while (i--) {",
            "hits": 0,
            "miss": true
          },
          "347": {
            "source": "            if(schema._meta[i].className){",
            "hits": 0,
            "miss": true
          },
          "348": {
            "source": "                return schema._meta[i].className",
            "hits": 0,
            "miss": true
          },
          "349": {
            "source": "            }",
            "miss": false
          },
          "350": {
            "source": "        }",
            "miss": false
          },
          "351": {
            "source": "    }",
            "miss": false
          },
          "352": {
            "source": "    return undefined;",
            "hits": 39,
            "miss": false
          },
          "353": {
            "source": "}",
            "miss": false
          },
          "354": {
            "source": "",
            "miss": false
          },
          "355": {
            "source": "",
            "miss": false
          },
          "356": {
            "source": "// decode a Joi validator into swagger schema property",
            "miss": false
          },
          "357": {
            "source": "internals.validatorToProperty = function (name, param, definitions, requiredArray) {",
            "hits": 1,
            "miss": false
          },
          "358": {
            "source": "    if (param === null ||",
            "hits": 124,
            "miss": false
          },
          "359": {
            "source": "        param === undefined) {",
            "miss": false
          },
          "360": {
            "source": "        return undefined;",
            "hits": 67,
            "miss": false
          },
          "361": {
            "source": "    }",
            "miss": false
          },
          "362": {
            "source": "",
            "miss": false
          },
          "363": {
            "source": "    // removes forbidden properties",
            "miss": false
          },
          "364": {
            "source": "    if (param._flags",
            "hits": 57,
            "miss": false
          },
          "365": {
            "source": "        && param._flags.presence",
            "miss": false
          },
          "366": {
            "source": "        && param._flags.presence === 'forbidden'){",
            "miss": false
          },
          "367": {
            "source": "            return undefined;",
            "hits": 0,
            "miss": true
          },
          "368": {
            "source": "    }",
            "miss": false
          },
          "369": {
            "source": "",
            "miss": false
          },
          "370": {
            "source": "    var property = {",
            "hits": 57,
            "miss": false
          },
          "371": {
            "source": "        type: 'void'",
            "miss": false
          },
          "372": {
            "source": "    };",
            "miss": false
          },
          "373": {
            "source": "",
            "miss": false
          },
          "374": {
            "source": "    // create a definition and return that",
            "miss": false
          },
          "375": {
            "source": "    if (typeof param.validate !== 'function') {",
            "hits": 57,
            "miss": false
          },
          "376": {
            "source": "        property.type = internals.validatorsToDefinitionName(name, param, definitions);",
            "hits": 1,
            "miss": false
          },
          "377": {
            "source": "        return property;",
            "hits": 1,
            "miss": false
          },
          "378": {
            "source": "    }",
            "miss": false
          },
          "379": {
            "source": "",
            "miss": false
          },
          "380": {
            "source": "    if (param.describe) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "param.describe",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 56,
            "miss": true
          },
          "381": {
            "source": "        var describe = param.describe();",
            "hits": 56,
            "miss": false
          },
          "382": {
            "source": "        property.type = param._type.toLowerCase();",
            "hits": 56,
            "miss": false
          },
          "383": {
            "source": "        if(param._description){",
            "hits": 56,
            "miss": false
          },
          "384": {
            "source": "            property.description  = param._description; ",
            "hits": 4,
            "miss": false
          },
          "385": {
            "source": "        }",
            "miss": false
          },
          "386": {
            "source": "        if(param._notes && param._tags.length > 0){",
            "chunks": [
              {
                "source": "        if("
              },
              {
                "source": "param._notes",
                "miss": "true"
              },
              {
                "source": " && param._tags.length > 0){"
              }
            ],
            "hits": 56,
            "miss": true
          },
          "387": {
            "source": "            property.notes  = param._notes; ",
            "hits": 0,
            "miss": true
          },
          "388": {
            "source": "        }",
            "miss": false
          },
          "389": {
            "source": "        if(param._tags && param._tags.length > 0){",
            "chunks": [
              {
                "source": "        if("
              },
              {
                "source": "param._tags",
                "miss": "true"
              },
              {
                "source": " && param._tags.length > 0){"
              }
            ],
            "hits": 56,
            "miss": true
          },
          "390": {
            "source": "            property.tags  = param._tags; ",
            "hits": 0,
            "miss": true
          },
          "391": {
            "source": "        }",
            "miss": false
          },
          "392": {
            "source": "        ",
            "miss": false
          },
          "393": {
            "source": "        //property.description = typeof param._description === 'string' ? param._description : undefined;",
            "miss": false
          },
          "394": {
            "source": "        //property.notes = typeof param._notes !== 'function' && param._notes.length ? param._notes : undefined;",
            "miss": false
          },
          "395": {
            "source": "        //property.tags = typeof param._tags !== 'function' && param._tags.length ? param._tags : undefined;",
            "miss": false
          },
          "396": {
            "source": "        //property.defaultValue = (describe.flags) ? describe.flags.default : null;",
            "miss": false
          },
          "397": {
            "source": "",
            "miss": false
          },
          "398": {
            "source": "        if (param._flags && param._flags.presence) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "param._flags",
                "miss": "true"
              },
              {
                "source": " && param._flags.presence) {"
              }
            ],
            "hits": 56,
            "miss": true
          },
          "399": {
            "source": "            property.required = (param._flags.presence === 'required') ? true : false;",
            "chunks": [
              {
                "source": "            property.required = ("
              },
              {
                "source": "param._flags.presence === 'required'",
                "miss": "true"
              },
              {
                "source": ") ? true : "
              },
              {
                "source": "false",
                "miss": "never"
              },
              {
                "source": ";"
              }
            ],
            "hits": 5,
            "miss": true
          },
          "400": {
            "source": "        }",
            "miss": false
          },
          "401": {
            "source": "",
            "miss": false
          },
          "402": {
            "source": "        // add enum values if not only undefined or null",
            "miss": false
          },
          "403": {
            "source": "        if (Array.isArray(describe.valids) && describe.valids.length) {",
            "hits": 56,
            "miss": false
          },
          "404": {
            "source": "            var enums = describe.valids.filter(function (v) {",
            "hits": 1,
            "miss": false
          },
          "405": {
            "source": "                return v !== undefined && v !== '';",
            "chunks": [
              {
                "source": "                return "
              },
              {
                "source": "v !== undefined",
                "miss": "true"
              },
              {
                "source": " && v !== '';"
              }
            ],
            "hits": 4,
            "miss": true
          },
          "406": {
            "source": "            });",
            "miss": false
          },
          "407": {
            "source": "            if (enums.length) {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "enums.length",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "408": {
            "source": "                property[\"enum\"] = enums;",
            "hits": 1,
            "miss": false
          },
          "409": {
            "source": "            }",
            "miss": false
          },
          "410": {
            "source": "        }",
            "miss": false
          },
          "411": {
            "source": "",
            "miss": false
          },
          "412": {
            "source": "        if (property.type === 'number') {",
            "hits": 56,
            "miss": false
          },
          "413": {
            "source": "            property.minimum = internals.getArgByName(describe.rules, 'min');",
            "hits": 27,
            "miss": false
          },
          "414": {
            "source": "            property.maximum = internals.getArgByName(describe.rules, 'max');",
            "hits": 27,
            "miss": false
          },
          "415": {
            "source": "            if (internals.existsByName(describe.rules, 'integer')) {",
            "chunks": [
              {
                "source": "            if ("
              },
              {
                "source": "internals.existsByName(describe.rules, 'integer')",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 27,
            "miss": true
          },
          "416": {
            "source": "                property.type = 'integer';",
            "hits": 0,
            "miss": true
          },
          "417": {
            "source": "            }",
            "miss": false
          },
          "418": {
            "source": "        }",
            "miss": false
          },
          "419": {
            "source": "",
            "miss": false
          },
          "420": {
            "source": "      //  if (property.type === 'object' && param._inner) {",
            "miss": false
          },
          "421": {
            "source": "        //    var className = internals._getClassName(param);",
            "miss": false
          },
          "422": {
            "source": "       //     var param = (param._inner.children) ? param._inner.children : param._inner",
            "miss": false
          },
          "423": {
            "source": "        //    property.type = internals.validatorsToDefinitionName(",
            "miss": false
          },
          "424": {
            "source": "        //            className || name || property.description,",
            "miss": false
          },
          "425": {
            "source": "        //        param,",
            "miss": false
          },
          "426": {
            "source": "        //        definitions);",
            "miss": false
          },
          "427": {
            "source": "    //    }",
            "miss": false
          },
          "428": {
            "source": "",
            "miss": false
          },
          "429": {
            "source": "        if (property.type === 'array') {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "property.type === 'array'",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 56,
            "miss": true
          },
          "430": {
            "source": "            property.minItems = internals.getArgByName(describe.rules, 'min');",
            "hits": 0,
            "miss": true
          },
          "431": {
            "source": "            property.maxItems = internals.getArgByName(describe.rules, 'max');",
            "hits": 0,
            "miss": true
          },
          "432": {
            "source": "",
            "miss": false
          },
          "433": {
            "source": "            var arrayTypes = param._inner ? param._inner.inclusions : internals.getArgByName(describe.rules, 'includes');",
            "hits": 0,
            "miss": true
          },
          "434": {
            "source": "            // swagger appears to only support one array type at a time, so lets grab the first one",
            "miss": false
          },
          "435": {
            "source": "            var firstInclusionType = internals.first(arrayTypes);",
            "hits": 0,
            "miss": true
          },
          "436": {
            "source": "",
            "miss": false
          },
          "437": {
            "source": "            if (firstInclusionType) {",
            "hits": 0,
            "miss": true
          },
          "438": {
            "source": "                // get className of embeded array",
            "miss": false
          },
          "439": {
            "source": "                if(name === 'items'",
            "hits": 0,
            "miss": true
          },
          "440": {
            "source": "                    && Hoek.reach(param, '_inner.inclusions.0._meta')",
            "miss": false
          },
          "441": {
            "source": "                    && Array.isArray(param._inner.inclusions[0]._meta)){",
            "miss": false
          },
          "442": {
            "source": "",
            "miss": false
          },
          "443": {
            "source": "                    var meta = param._inner.inclusions[0]._meta,",
            "hits": 0,
            "miss": true
          },
          "444": {
            "source": "                        i = meta.length;",
            "miss": false
          },
          "445": {
            "source": "                    while (i--) {",
            "hits": 0,
            "miss": true
          },
          "446": {
            "source": "                        if(meta[i].className){",
            "hits": 0,
            "miss": true
          },
          "447": {
            "source": "                            name = meta[i].className",
            "hits": 0,
            "miss": true
          },
          "448": {
            "source": "                        }",
            "miss": false
          },
          "449": {
            "source": "                    }",
            "miss": false
          },
          "450": {
            "source": "                }",
            "miss": false
          },
          "451": {
            "source": "",
            "miss": false
          },
          "452": {
            "source": "",
            "miss": false
          },
          "453": {
            "source": "                var arrayProperty = internals.validatorToProperty(name, firstInclusionType, definitions);",
            "hits": 0,
            "miss": true
          },
          "454": {
            "source": "",
            "miss": false
          },
          "455": {
            "source": "                if (arrayProperty['enum']) {",
            "hits": 0,
            "miss": true
          },
          "456": {
            "source": "                    property.items = {",
            "hits": 0,
            "miss": true
          },
          "457": {
            "source": "                        'type': arrayProperty.type,",
            "miss": false
          },
          "458": {
            "source": "                        'enum': arrayProperty['enum']",
            "miss": false
          },
          "459": {
            "source": "                    };",
            "miss": false
          },
          "460": {
            "source": "                } else {",
            "miss": false
          },
          "461": {
            "source": "                    if(arrayProperty.type === 'string'){",
            "hits": 0,
            "miss": true
          },
          "462": {
            "source": "                        property.items = {",
            "hits": 0,
            "miss": true
          },
          "463": {
            "source": "                            'type': arrayProperty.type",
            "miss": false
          },
          "464": {
            "source": "                        };",
            "miss": false
          },
          "465": {
            "source": "                    }else{",
            "miss": false
          },
          "466": {
            "source": "                        property.items = {",
            "hits": 0,
            "miss": true
          },
          "467": {
            "source": "                            '$ref': '#/definitions/' + name",
            "miss": false
          },
          "468": {
            "source": "                        };",
            "miss": false
          },
          "469": {
            "source": "                    }",
            "miss": false
          },
          "470": {
            "source": "",
            "miss": false
          },
          "471": {
            "source": "                }",
            "miss": false
          },
          "472": {
            "source": "            }",
            "miss": false
          },
          "473": {
            "source": "        }",
            "miss": false
          },
          "474": {
            "source": "",
            "miss": false
          },
          "475": {
            "source": "        if (property.type === 'any') {",
            "hits": 56,
            "miss": false
          },
          "476": {
            "source": "            var i = param._meta.length;",
            "hits": 1,
            "miss": false
          },
          "477": {
            "source": "            while (i--) {",
            "chunks": [
              {
                "source": "            while ("
              },
              {
                "source": "i--",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "478": {
            "source": "                if(param._meta[i].swaggerType",
            "hits": 0,
            "miss": true
          },
          "479": {
            "source": "                    && param._meta[i].swaggerType === 'file'){",
            "miss": false
          },
          "480": {
            "source": "                    property.type = \"file\";",
            "hits": 0,
            "miss": true
          },
          "481": {
            "source": "                    property.in = \"body\";",
            "hits": 0,
            "miss": true
          },
          "482": {
            "source": "                }",
            "miss": false
          },
          "483": {
            "source": "            }",
            "miss": false
          },
          "484": {
            "source": "        }",
            "miss": false
          },
          "485": {
            "source": "",
            "miss": false
          },
          "486": {
            "source": "    }",
            "miss": false
          },
          "487": {
            "source": "",
            "miss": false
          },
          "488": {
            "source": "    // if a required array is present use that for required fields instead of a flag",
            "miss": false
          },
          "489": {
            "source": "    if (requiredArray) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "requiredArray",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 56,
            "miss": true
          },
          "490": {
            "source": "        if (property.required) {",
            "hits": 0,
            "miss": true
          },
          "491": {
            "source": "            requiredArray.push(name);",
            "hits": 0,
            "miss": true
          },
          "492": {
            "source": "        }",
            "miss": false
          },
          "493": {
            "source": "        delete property.required;",
            "hits": 0,
            "miss": true
          },
          "494": {
            "source": "    }",
            "miss": false
          },
          "495": {
            "source": "",
            "miss": false
          },
          "496": {
            "source": "    return property;",
            "hits": 56,
            "miss": false
          },
          "497": {
            "source": "};",
            "miss": false
          },
          "498": {
            "source": "",
            "miss": false
          },
          "499": {
            "source": "",
            "miss": false
          },
          "500": {
            "source": "",
            "miss": false
          },
          "501": {
            "source": "// get arg value of an item in arrays of structure",
            "miss": false
          },
          "502": {
            "source": "//   [ { name: 'name', arg: 'arg' } ]",
            "miss": false
          },
          "503": {
            "source": "// or from two arrays",
            "miss": false
          },
          "504": {
            "source": "//   ['name'] [ {'0': 'arg'} ]",
            "miss": false
          },
          "505": {
            "source": "internals.getArgByName = function (array, name, args) {",
            "hits": 1,
            "miss": false
          },
          "506": {
            "source": "    if (!Array.isArray(array)) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "!Array.isArray(array)",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 54,
            "miss": true
          },
          "507": {
            "source": "        return;",
            "hits": 54,
            "miss": false
          },
          "508": {
            "source": "    }",
            "miss": false
          },
          "509": {
            "source": "",
            "miss": false
          },
          "510": {
            "source": "    if (args) {",
            "hits": 0,
            "miss": true
          },
          "511": {
            "source": "        var location = names.lastIndexOf(name);",
            "hits": 0,
            "miss": true
          },
          "512": {
            "source": "        if (~location && args[location]) {",
            "hits": 0,
            "miss": true
          },
          "513": {
            "source": "            return args[location]['0'];",
            "hits": 0,
            "miss": true
          },
          "514": {
            "source": "        }",
            "miss": false
          },
          "515": {
            "source": "        return;",
            "hits": 0,
            "miss": true
          },
          "516": {
            "source": "    }",
            "miss": false
          },
          "517": {
            "source": "",
            "miss": false
          },
          "518": {
            "source": "    for (var i = array.length - 1; i >= 0; i--) {",
            "hits": 0,
            "miss": true
          },
          "519": {
            "source": "        if (array[i].name === name) {",
            "hits": 0,
            "miss": true
          },
          "520": {
            "source": "            return array[i].arg;",
            "hits": 0,
            "miss": true
          },
          "521": {
            "source": "        }",
            "miss": false
          },
          "522": {
            "source": "    }",
            "miss": false
          },
          "523": {
            "source": "};",
            "miss": false
          },
          "524": {
            "source": "",
            "miss": false
          },
          "525": {
            "source": "",
            "miss": false
          },
          "526": {
            "source": "// get existance of an item in array of structure [ { name: 'name' } ]",
            "miss": false
          },
          "527": {
            "source": "internals.existsByName = function (array, name) {",
            "hits": 1,
            "miss": false
          },
          "528": {
            "source": "    return array && array.some(function (v) {",
            "chunks": [
              {
                "source": "    return "
              },
              {
                "source": "array",
                "miss": "false"
              },
              {
                "source": " && "
              },
              {
                "source": "array.some(function (v) {",
                "miss": "never"
              }
            ],
            "hits": 27,
            "miss": true
          },
          "529": {
            "source": "        return v.name === name;",
            "hits": 0,
            "miss": true
          },
          "530": {
            "source": "    });",
            "chunks": [
              {
                "source": "    })",
                "miss": "never"
              },
              {
                "source": ";"
              }
            ],
            "miss": true
          },
          "531": {
            "source": "};",
            "miss": false
          },
          "532": {
            "source": "",
            "miss": false
          },
          "533": {
            "source": "",
            "miss": false
          },
          "534": {
            "source": "",
            "miss": false
          },
          "535": {
            "source": "// create a definition from an object of Joi validators. Return the definition name",
            "miss": false
          },
          "536": {
            "source": "internals.validatorsToDefinitionName = function (name, params, definitions) {",
            "hits": 1,
            "miss": false
          },
          "537": {
            "source": "",
            "miss": false
          },
          "538": {
            "source": "    // if no name create a signature",
            "miss": false
          },
          "539": {
            "source": "    if (!name) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "!name",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "540": {
            "source": "        name = 'definition_' + ShortId.generate();",
            "hits": 1,
            "miss": false
          },
          "541": {
            "source": "    }",
            "miss": false
          },
          "542": {
            "source": "    ",
            "miss": false
          },
          "543": {
            "source": "",
            "miss": false
          },
          "544": {
            "source": "    // need to either create new object or comparision",
            "miss": false
          },
          "545": {
            "source": "    var definition = internals.createDefinition(name, params, definitions);",
            "hits": 1,
            "miss": false
          },
          "546": {
            "source": "",
            "miss": false
          },
          "547": {
            "source": "    // find existing definition by this name",
            "miss": false
          },
          "548": {
            "source": "    var foundDefinition = definitions[name];",
            "hits": 1,
            "miss": false
          },
          "549": {
            "source": "    if (foundDefinition) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "foundDefinition",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "550": {
            "source": "",
            "miss": false
          },
          "551": {
            "source": "        // deep compare object",
            "miss": false
          },
          "552": {
            "source": "        if(Hoek.deepEqual(foundDefinition, definition)){",
            "hits": 0,
            "miss": true
          },
          "553": {
            "source": "            // return existing id",
            "miss": false
          },
          "554": {
            "source": "            return foundDefinition.id;",
            "hits": 0,
            "miss": true
          },
          "555": {
            "source": "        }else{",
            "miss": false
          },
          "556": {
            "source": "            // create new definition with alt name, to stop reuse of definition",
            "miss": false
          },
          "557": {
            "source": "            definition.id = 'definition_' + ShortId.generate();",
            "hits": 0,
            "miss": true
          },
          "558": {
            "source": "            definitions[definition.id] = definition;",
            "hits": 0,
            "miss": true
          },
          "559": {
            "source": "        }",
            "miss": false
          },
          "560": {
            "source": "    }else{",
            "miss": false
          },
          "561": {
            "source": "        // create new definition",
            "miss": false
          },
          "562": {
            "source": "        definitions[name] = definition;",
            "hits": 1,
            "miss": false
          },
          "563": {
            "source": "    }",
            "miss": false
          },
          "564": {
            "source": "",
            "miss": false
          },
          "565": {
            "source": "    return definition.id;",
            "hits": 1,
            "miss": false
          },
          "566": {
            "source": "};",
            "miss": false
          },
          "567": {
            "source": "",
            "miss": false
          },
          "568": {
            "source": "",
            "miss": false
          },
          "569": {
            "source": "// creates a new definition",
            "miss": false
          },
          "570": {
            "source": "internals.createDefinition = function (name, params, definitions) {",
            "hits": 1,
            "miss": false
          },
          "571": {
            "source": "    //console.log(JSON.stringify(internals.validatorsToProperties(params, definitions)))",
            "miss": false
          },
          "572": {
            "source": "    ",
            "miss": false
          },
          "573": {
            "source": "    var payloadProperties = internals.validatorsToProperties(params, definitions);",
            "hits": 1,
            "miss": false
          },
          "574": {
            "source": "    var x = internals.propertiesToAPIParams(payloadProperties, null);",
            "hits": 1,
            "miss": false
          },
          "575": {
            "source": "    ",
            "miss": false
          },
          "576": {
            "source": "  //  return {",
            "miss": false
          },
          "577": {
            "source": "  //      \"type\": \"object\",",
            "miss": false
          },
          "578": {
            "source": "  //      \"properties\": internals.validatorsToProperties(params, definitions)",
            "miss": false
          },
          "579": {
            "source": "  //  };",
            "miss": false
          },
          "580": {
            "source": "    return Definitions.build( x );",
            "hits": 1,
            "miss": false
          },
          "581": {
            "source": "}",
            "miss": false
          },
          "582": {
            "source": "",
            "miss": false
          },
          "583": {
            "source": "",
            "miss": false
          },
          "584": {
            "source": "internals.first = function first(array) {",
            "hits": 1,
            "miss": false
          },
          "585": {
            "source": "    return array ? array[0] : undefined;",
            "hits": 0,
            "miss": true
          },
          "586": {
            "source": "};",
            "miss": false
          },
          "587": {
            "source": "",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "paths.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/tags.js",
        "percent": "100",
        "hits": 34,
        "misses": 0,
        "sloc": 34,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Builds the swagger JSON file tag section",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "'use strict';",
            "miss": false
          },
          "7": {
            "source": "var Joi     = require('joi'),",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "    Hoek    = require('hoek');",
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "var tags = module.exports = {};\t",
            "hits": 1,
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "",
            "miss": false
          },
          "13": {
            "source": "// schema for tags",
            "miss": false
          },
          "14": {
            "source": "tags.schema = Joi.array().items(",
            "hits": 1,
            "miss": false
          },
          "15": {
            "source": "    Joi.object({",
            "miss": false
          },
          "16": {
            "source": "        name: Joi.string().required(),",
            "miss": false
          },
          "17": {
            "source": "        description: Joi.string(),",
            "miss": false
          },
          "18": {
            "source": "        externalDocs: Joi.object({",
            "miss": false
          },
          "19": {
            "source": "            description: Joi.string(),",
            "miss": false
          },
          "20": {
            "source": "            url: Joi.string().uri(),",
            "miss": false
          },
          "21": {
            "source": "        }),",
            "miss": false
          },
          "22": {
            "source": "    }).meta({",
            "miss": false
          },
          "23": {
            "source": "        className: 'Tag'",
            "miss": false
          },
          "24": {
            "source": "    })",
            "miss": false
          },
          "25": {
            "source": ").optional();  ",
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "/**",
            "miss": false
          },
          "29": {
            "source": " * build the swagger tag section",
            "miss": false
          },
          "30": {
            "source": " *",
            "miss": false
          },
          "31": {
            "source": " * @param  {Object} settings",
            "miss": false
          },
          "32": {
            "source": " * @return {Object}",
            "miss": false
          },
          "33": {
            "source": " */\t",
            "miss": false
          },
          "34": {
            "source": "tags.build = function( settings ){",
            "hits": 1,
            "miss": false
          },
          "35": {
            "source": "    if( settings.tags ){",
            "hits": 32,
            "miss": false
          },
          "36": {
            "source": "        Joi.assert(settings.tags, tags.schema);",
            "hits": 2,
            "miss": false
          },
          "37": {
            "source": "        return settings.tags;",
            "hits": 2,
            "miss": false
          },
          "38": {
            "source": "    }else{",
            "miss": false
          },
          "39": {
            "source": "        return [];",
            "hits": 30,
            "miss": false
          },
          "40": {
            "source": "    }",
            "miss": false
          },
          "41": {
            "source": "}",
            "miss": false
          },
          "42": {
            "source": "",
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "tags.js",
        "percentClass": "high",
        "dirname": "lib/"
      },
      {
        "filename": "lib/utilities.js",
        "percent": "100",
        "hits": 22,
        "misses": 0,
        "sloc": 22,
        "source": {
          "1": {
            "source": "/*",
            "miss": false
          },
          "2": {
            "source": " * Utility functions",
            "miss": false
          },
          "3": {
            "source": " */",
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "'use strict';",
            "miss": false
          },
          "7": {
            "source": "var utilities = module.exports = {};\t\t",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "\t\t\t\t",
            "miss": false
          },
          "9": {
            "source": "\t\t",
            "miss": false
          },
          "10": {
            "source": "/**",
            "miss": false
          },
          "11": {
            "source": "\t* does an object have any of its own properties",
            "miss": false
          },
          "12": {
            "source": "\t*",
            "miss": false
          },
          "13": {
            "source": "\t* @param  {Object} obj",
            "miss": false
          },
          "14": {
            "source": "\t* @return {Boolean}",
            "miss": false
          },
          "15": {
            "source": "\t*/ ",
            "miss": false
          },
          "16": {
            "source": "utilities.hasProperties = function( obj ) {",
            "hits": 1,
            "miss": false
          },
          "17": {
            "source": "\tvar key;",
            "hits": 42,
            "miss": false
          },
          "18": {
            "source": "\tfor(key in obj) {",
            "hits": 42,
            "miss": false
          },
          "19": {
            "source": "\t\tif( obj.hasOwnProperty( key ) ) {",
            "hits": 4,
            "miss": false
          },
          "20": {
            "source": "\t\t\treturn true;",
            "hits": 1,
            "miss": false
          },
          "21": {
            "source": "\t\t}",
            "miss": false
          },
          "22": {
            "source": "\t}",
            "miss": false
          },
          "23": {
            "source": "\treturn false;",
            "hits": 41,
            "miss": false
          },
          "24": {
            "source": "}",
            "miss": false
          }
        },
        "segments": [
          "lib"
        ],
        "basename": "utilities.js",
        "percentClass": "high",
        "dirname": "lib/"
      }
    ]
  },
  "lint": []
}